# Getting started {#sec-getting-started}

::: {#chapter-02-summary .callout-important .unnumbered title="Summary" appearance="simple" icon="false"}
This is a long chapter that goes on a whistle stop tour of R.

It covers setting up RStudio, installing packages, finding help, how to organise a project, the atoms of R and how they combine in useful ways. By the end you'll be able to create a plot and write outputs using the Palmer Penguins package.

Don't worry if you don't get it all in the first pass, that's why the book and lots of other materials exist, so you can come back here or explore out there.
:::

## What is R? {#sec-what-is-r}

Stuff

## RStudio {#sec-rstudio}

### What is real?

### Where am I?

## Installing and loading packages

Packages are collections of functions, and a function is a piece of code written to perform a specific task, such as installing a package.

Therefore, the function `install.packages()` is a piece of code written to perform the task of installing packages.

We use the function by typing `install.packages("tidyverse")` with the name of the package in quotes inside the round brackets.

Here the package is `tidyverse`. Using the console panel to type this and pressing `Enter` will run the function.

We of course need to know the name of the packages we are interested in.

Once a package is installed we need to load it into our environment to use it. Loading packages is performed using the `library()` function. As with installation, we put the name of the package - the argument for our function - that we want to load in between the round brackets like so `library(tidyverse)`.

As before this can be done on the console, but we will usually load packages as part of script. *Note that we don't need the quotes for the library function.*

::: {#cowsay .callout-tip .unnumbered title="Try installing the `cowsay` package" icon="false"}
Now load `cowsay` with the `library()` function. `cowsay` has one function called `say()` that you can use to create messages with animals.

```{r}
#| echo: false
#| message: false
library(cowsay)
say("Use ?say to open the help\ndocumentation for the say() function.", 
    "cow")
```
:::

### Introducing the Palmer Penguins {#sec-palmer-penguins}

The [Palmer Penguins](https://allisonhorst.github.io/palmerpenguins/) package is a dataset curated by Allison Horst of data on three penguin species from the [Palmer Station in Antarctica](https://pallter.marine.rutgers.edu/) (@fig-palmer-penguins-hex).

```{r}
#| label: fig-palmer-penguins-hex 
#| echo: false
#| out-width: 33%
#| fig-cap: |
#|   Hex sticker of the [Palmer Penguins](https://allisonhorst.github.io/palmerpenguins/) package curated by  Allison Horst showing the Chinstrap, Gentoo  and Adélie penguins.
#| fig-alt: |
#|  Hexagon sticker with the title Palmer Penguins and drawings of Chinstrap, Gentoo  and Adélie penguins.

knitr::include_graphics("img/palmerpenguins.png", dpi = 270)
```

It's a great dataset for getting started with and you can install it like so:

```{r}
#| eval: false
install.packages("palmerpenguins")
```

The three penguins species are the Chinstrap, Gentoo and Adélie penguins (@fig-palmer-penguins).

```{r}
#| label: fig-palmer-penguins 
#| echo: false
#| out-width: 80%
#| fig-cap: |
#|   Artwork by \@allison_horst of the Chinstrap, Gentoo  and Adélie penguins.
#| fig-alt: |
#|  Artwork by \@allison_horst of the Chinstrap, Gentoo  and Adélie penguins.

knitr::include_graphics("img/penguins.png", dpi = 270)
```

The dataset records various information about 344 penguins, including their culmen (@fig-culmen).

```{r}
#| label: fig-culmen 
#| echo: false
#| out-width: 66%
#| fig-cap: |
#|   Artwork by \@allison_horst of the culman of a Gentoo penguin.
#| fig-alt: |
#|  Artwork by \@allison_horst of the culman of a Gentoo penguin. The culmen is the upper ridge of a bird's bill. How bill length and bill depth on the culmen are measured are indicated.

knitr::include_graphics("img/culmen_depth.png", dpi = 270)
```

## What is a function and how do I use them?

## A project orientated workflow

## Base R, the tidyverse and tidy data

The key difference between base R and the tidyverse is that the tidyverse uses functions named as verbs with a single purpose, whereas base R syntax can be used for multiple purposes.

This trade-off I'd characterise as cognitive ease versus flexibility.

## Atoms of R

## Categorical data aka Factors

## Assigning objects

### Indexing and sub-setting

## Data containers: Lists, matrices, arrays and data frames {#sec-data-containers}

### Data frames {#sec-data-frames}

For data analysis in R, we mostly be using data frames.

## Plotting and exporting data

## Getting help

https://rweekly.org/ https://posit.cloud/learn/recipes https://www.bigbookofr.com/
