[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Librarians",
    "section": "",
    "text": "Preface\nThis is a book contains guidance for getting started using R, with code and examples for addressing tasks faced by the Bibliometrics Team at the University of Southampton (UoS) Library Service.\nIf you want a full guide to data analysis in R check out R for Data Science\nSome of the materials here are re-used from previous workshops I ran for biologists from 2019/20 called Coding Together.\nIf you are new to R, then the first thing to know is that R is a programming language and RStudio is program for working with R called an integrated development environment (IDE).\nYou can use R without installing RStudio, but you can’t work with R in RStudio by installing RStudio alone. Download R here and Download RStudio Desktop here.\nIf you are wondering if and/or why learning R might be useful, 1  Setting the scene should help answer those questions.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "setting-the-scene.html",
    "href": "setting-the-scene.html",
    "title": "1  Setting the scene",
    "section": "",
    "text": "1.1 The challenge\nNew often means difficult, but difficult things are also often worth doing. The quote in Note 1.1 pretty much captures my feelings about the challenge of getting started and learning R:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting the scene</span>"
    ]
  },
  {
    "objectID": "setting-the-scene.html#sec-the-challenge",
    "href": "setting-the-scene.html#sec-the-challenge",
    "title": "1  Setting the scene",
    "section": "",
    "text": "Note 1.1: Is programming hard to learn?\n\n\n\n“…programming in general…is primarily about learning to think a certain way - to decompose a problem into very simple steps each of which can be easily solved. Some people have an affinity to this – they will pick it up faster, while others will need more practice.”\nSource: The Biostar Handbook\n\n\n\n1.1.1 But why is it worth doing?\n\nMaybe it isn’t, but experience is one way to find out.\nMy experience is that in the long term, it saves me time and frees up time from doing boring repetitive tasks for doing more interesting and more complex things.\n\n\n\n1.1.2 What are we doing?\nFigure 1.1 shows a version of the data science cycle from R4DS. Conceptually, this is what we are mostly doing. In R4DS, all of these steps are done programmatically, but we won’t be trying to do everything here.\nModeling is beyond our scope here, but you may wish to explore the modeling part of the cycle yourself. For example, check out Tidy Modeling with R.\nAs a librarian, your data is likely to be in a spreadsheet. We need to learn how to import that data into an environment where we can work with it and explore questions.\nIn asking and answering those questions we need to learn to transform data and/or visualise our data.\nWe then need to communicate our findings back out of our working environment to our colleagues or for our own records.\n\n\n\n\n\n\n\n\nFigure 1.1: A version of the data science cycle from R4DS. We will cover data importing, tidying, transformation and visualisation, but not modeling. Communication of your output is the final part of the workflow.\n\n\n\n\n\n\n\n1.1.3 How are we going to do it?\nAs per Note 1.1, step-by-step and through practice we will learn to think and work in a certain way that may be different to how you have previously worked.\nIt may seem all a bit abstract to begin with, but that is part of the point. In learning to generalise from abstractions, one can identify and apply the same concepts to lots of specific problems that may at first seem different, but are either the same or similar.\nOur guiding principles in doing this are:\n\nKeep the raw data raw.\nWrite love letters to our future selves in the form of our code and how we organise and document our data.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting the scene</span>"
    ]
  },
  {
    "objectID": "setting-the-scene.html#sec-if-youre-using-excel-you-are-already-programming",
    "href": "setting-the-scene.html#sec-if-youre-using-excel-you-are-already-programming",
    "title": "1  Setting the scene",
    "section": "1.2 If you’re using Excel you are already programming",
    "text": "1.2 If you’re using Excel you are already programming\nIn 2021 Excel became Turing-complete (Figure 1.2), which is a colloquial way of saying one computing language can approximate another computing language.\nIn other words, anything one can do in Python, R, C++ and so on, should also be possible in Excel.\nHence if you are using Excel, you are already a programmer.\n\n\n\n\n\n\n\n\nFigure 1.2: The head of Microsoft announces that Excel is Turing-complete.\n\n\n\n\n\nGordon Shotwell wrote a blog post called R for Excel Users that discusses the differences between Excel and R. Perhaps the biggest conceptual difference is that in Excel one is programming with the raw data - which conflicts with the guiding principles of keeping the raw data separate from the code (Section 1.1.3).\nWith most languages, the file(s) holding the data are separate from the file(s) that contains the code.\nOn the one hand programming with the raw data makes it easy to get started in Excel, but on the other hand it gets harder as the complexity of what you are trying to do increases.\nAnd vice versa.\nIn other languages getting started is harder, but it’s easier to do more complex tasks once some initial learning is done.\nIt’s really a question of whether it’s worth the investment learning R, python etc. Hence my comments in Section 1.1.1.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting the scene</span>"
    ]
  },
  {
    "objectID": "setting-the-scene.html#sec-a-little-goes-a-long-way",
    "href": "setting-the-scene.html#sec-a-little-goes-a-long-way",
    "title": "1  Setting the scene",
    "section": "1.3 A little goes a long way",
    "text": "1.3 A little goes a long way\nWhen considering investing in learning, it’s important to know that we don’t need to learn everything. A modest investment does yield large rewards.\nA few hours learning, backed-up with practice can be enough for many people.\nAs illustrated in Figure 1.3 there are a whole spectrum of users from practitioners at one end who are focused on applying some programming tools to their specific problems. Whilst at the other end who develop the programming tools and language itself.\nIn reality one may move around on that spectrum as ones needs and interests change over time.\n\n\n\n\n\n\n\n\n\nFigure 1.3: The practitioner-programmer spectrum. At one end lies practitioners who use programming tools and at the other end lies developers of programming languages and tools. The circle in-between indicates how individuals may move around on the spectrum.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting the scene</span>"
    ]
  },
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "2  Getting started",
    "section": "",
    "text": "2.1 What is R?\nStuff",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#sec-rstudio",
    "href": "getting-started.html#sec-rstudio",
    "title": "2  Getting started",
    "section": "2.2 RStudio",
    "text": "2.2 RStudio\n\n2.2.1 What is real?\n\n\n2.2.2 Where am I?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#installing-and-loading-packages",
    "href": "getting-started.html#installing-and-loading-packages",
    "title": "2  Getting started",
    "section": "2.3 Installing and loading packages",
    "text": "2.3 Installing and loading packages\nPackages are collections of functions, and a function is a piece of code written to perform a specific task, such as installing a package.\nTherefore, the function install.packages() is a piece of code written to perform the task of installing packages.\nWe use the function by typing install.packages(\"tidyverse\") with the name of the package in quotes inside the round brackets.\nHere the package is tidyverse. Using the console panel to type this and pressing Enter will run the function.\nWe of course need to know the name of the packages we are interested in.\nOnce a package is installed we need to load it into our environment to use it. Loading packages is performed using the library() function. As with installation, we put the name of the package - the argument for our function - that we want to load in between the round brackets like so library(tidyverse).\nAs before this can be done on the console, but we will usually load packages as part of script. Note that we don’t need the quotes for the library function.\n\n\n\n\n\n\nTry installing the cowsay package\n\n\n\nNow load cowsay with the library() function. cowsay has one function called say() that you can use to create messages with animals.\n\n\n\n ----- \nUse ?say to open the help\ndocumentation for the say() function. \n ------ \n    \\   ^__^ \n     \\  (oo)\\ ________ \n        (__)\\         )\\ /\\ \n             ||------w|\n             ||      ||\n\n\n\n\n\n2.3.1 Introducing the Palmer Penguins\nThe Palmer Penguins package is a dataset curated by Allison Horst of data on three penguin species from the Palmer Station in Antarctica (Figure 2.1).\n\n\n\n\n\n\n\n\nFigure 2.1: Hex sticker of the Palmer Penguins package curated by Allison Horst showing the Chinstrap, Gentoo and Adélie penguins.\n\n\n\n\n\nIt’s a great dataset for getting started with and you can install it like so:\n\ninstall.packages(\"palmerpenguins\")\n\nThe three penguins species are the Chinstrap, Gentoo and Adélie penguins (Figure 2.2).\n\n\n\n\n\n\n\n\nFigure 2.2: Artwork by @allison_horst of the Chinstrap, Gentoo and Adélie penguins.\n\n\n\n\n\nThe dataset records various information about 344 penguins, including their culmen (Figure 2.3).\n\n\n\n\n\n\n\n\nFigure 2.3: Artwork by @allison_horst of the culman of a Gentoo penguin.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#what-is-a-function-and-how-do-i-use-them",
    "href": "getting-started.html#what-is-a-function-and-how-do-i-use-them",
    "title": "2  Getting started",
    "section": "2.4 What is a function and how do I use them?",
    "text": "2.4 What is a function and how do I use them?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#a-project-orientated-workflow",
    "href": "getting-started.html#a-project-orientated-workflow",
    "title": "2  Getting started",
    "section": "2.5 A project orientated workflow",
    "text": "2.5 A project orientated workflow",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#base-r-the-tidyverse-and-tidy-data",
    "href": "getting-started.html#base-r-the-tidyverse-and-tidy-data",
    "title": "2  Getting started",
    "section": "2.6 Base R, the tidyverse and tidy data",
    "text": "2.6 Base R, the tidyverse and tidy data\nBase R is everything that comes included when you install the R language, whereas the tidyverse has have to be installed in addition to base R. The tidyverse eight core packages that are loaded when the tidyverse library is loaded, but installs a number of other tidyverse packages that can be load separately using the library function.\nThe key difference between base R and the tidyverse is that the tidyverse uses functions named as verbs with a single purpose, whereas base R syntax can be used for multiple purposes.\nThis trade-off I’d characterise as cognitive ease versus flexibility.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#atoms-of-r",
    "href": "getting-started.html#atoms-of-r",
    "title": "2  Getting started",
    "section": "2.7 Atoms of R",
    "text": "2.7 Atoms of R",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#categorical-data-aka-factors",
    "href": "getting-started.html#categorical-data-aka-factors",
    "title": "2  Getting started",
    "section": "2.8 Categorical data aka Factors",
    "text": "2.8 Categorical data aka Factors",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#assigning-objects",
    "href": "getting-started.html#assigning-objects",
    "title": "2  Getting started",
    "section": "2.9 Assigning objects",
    "text": "2.9 Assigning objects\n\n2.9.1 Indexing and sub-setting",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#sec-data-containers",
    "href": "getting-started.html#sec-data-containers",
    "title": "2  Getting started",
    "section": "2.10 Data containers: Lists, matrices, arrays and data frames",
    "text": "2.10 Data containers: Lists, matrices, arrays and data frames\n\n2.10.1 Data frames\nFor data analysis in R, we mostly be using data frames.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#plotting-and-exporting-data",
    "href": "getting-started.html#plotting-and-exporting-data",
    "title": "2  Getting started",
    "section": "2.11 Plotting and exporting data",
    "text": "2.11 Plotting and exporting data",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#getting-help",
    "href": "getting-started.html#getting-help",
    "title": "2  Getting started",
    "section": "2.12 Getting help",
    "text": "2.12 Getting help\nhttps://rweekly.org/ https://posit.cloud/learn/recipes https://www.bigbookofr.com/",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "data-wrangling-1.html",
    "href": "data-wrangling-1.html",
    "title": "3  Data wrangling I",
    "section": "",
    "text": "3.1 Organising your data in spreadsheets\nData Organization in Spreadsheets by Karl W. Broman & Kara H. Woo is full of practical advice and context. It is well worth reading for helping you think about best practices for organising your data for yourself, and when working with others.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data wrangling I</span>"
    ]
  },
  {
    "objectID": "data-wrangling-1.html#sec-spreadsheets",
    "href": "data-wrangling-1.html#sec-spreadsheets",
    "title": "3  Data wrangling I",
    "section": "",
    "text": "3.1.1 Plain formats and Excel files\nFile formats like .csv and .tsv, comma separated variables and tab separated variables respectively are plain text files. That is to say they contain only the data, as text information, and are the simplest and most convenient way to share data as lots of software, including Excel, can read and interpret them.\nExcel files saves files into its own proprietary format .xls or .xlsx that holds information in addition to the data itself (metadata). For reading and writing excel files in R, tidyverse readxl package is very useful.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data wrangling I</span>"
    ]
  },
  {
    "objectID": "data-wrangling-1.html#introducing-dplyr",
    "href": "data-wrangling-1.html#introducing-dplyr",
    "title": "3  Data wrangling I",
    "section": "3.2 Introducing dplyr",
    "text": "3.2 Introducing dplyr\ndplyr “is a grammar of data manipulation”. Concretely, it’s a package of functions from the tidyverse that have been created for tasks that require manipulation of data stored in Section 2.10.1.\nThe grammar comes from the naming of the functions as verbs. Personally, I find this parallel between R code and human language makes things cognitively easier for me. I can describe what I want to do using natural language and translate it easily into tidyverse code.\n\n\n\n\n\n\n\n\nFigure 3.1: ‘Why is it called dplyr?’",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data wrangling I</span>"
    ]
  },
  {
    "objectID": "data-wrangling-1.html#the-four-most-common-dplyr-verbs",
    "href": "data-wrangling-1.html#the-four-most-common-dplyr-verbs",
    "title": "3  Data wrangling I",
    "section": "3.3 The four most common dplyr verbs",
    "text": "3.3 The four most common dplyr verbs\nWe’ll use the four most common verbs in dplyr to examine the Palmer Penguins data (Section 2.3.1).\n\n3.3.1 Filter rows with filter()\n\n\n\n\n\n\n\n\nFigure 3.2: The dplyr filter function. The filter function returns rows from your data frame that satisfy your filter expression as TRUE. Here it will return all Palmer Penguins with a bill longer or equal to 50 mm. Here it shows how filter will return all Palmer Penguins with a bill longer or equal to 50 mm. The function can either be used by providing the penguins data.frame as the first argument to the function or by passing the penguins data.frame via a pipe.\n\n\n\n\n\n\n\n3.3.2 Arranging rows with arrange()\n\n\n\n\n\n\n\n\nFigure 3.3: The dplyr arrange function. The arrange function orders rows from your data frame according to column variables. Here it will order the Palmer Penguins data.frame according to their flipper length. The function can either be used by providing the penguins data.frame as the first argument to the function or by passing the penguins data.frame via a pipe.\n\n\n\n\n\n\n\n3.3.3 Selecting columns with select()\n\n\n\n\n\n\n\n\nFigure 3.4: The dplyr select function. This function selects columns from your data frame. Here it will select the island and year columns from Palmer Penguins data.frame. The function can either be used by providing the penguins data.frame as the first argument to the function or by passing the penguins data.frame via a pipe.\n\n\n\n\n\n\n\n3.3.4 Creating new columns with mutate()\n\n\n\n\n\n\n\n\nFigure 3.5: The dplyr mutate function. The mutate function creates new column variables in your data frame. Here mutate creates a new variable called body_mass_kg in the Palmer Penguins data.frame by dividing the values in the body_mass_g column by 1000 and storing the answer in new variable body_mass_kg. The function can either be used by providing the penguins data.frame as the first argument to the function or by passing the penguins data.frame via a pipe.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data wrangling I</span>"
    ]
  },
  {
    "objectID": "data-wrangling-1.html#creating-grouped-summaries-with-dplyr",
    "href": "data-wrangling-1.html#creating-grouped-summaries-with-dplyr",
    "title": "3  Data wrangling I",
    "section": "3.4 Creating grouped summaries with dplyr",
    "text": "3.4 Creating grouped summaries with dplyr\n\npenguins |&gt; \n  summarise(mean_mass_g = mean(body_mass_g,na.rm = TRUE), n_penguins = n())\n\n# A tibble: 1 × 2\n  mean_mass_g n_penguins\n        &lt;dbl&gt;      &lt;int&gt;\n1       4202.        344\n\n\n\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(mean_mass_g = mean(body_mass_g,na.rm = TRUE), n_penguins = n())\n\n# A tibble: 3 × 3\n  species   mean_mass_g n_penguins\n  &lt;fct&gt;           &lt;dbl&gt;      &lt;int&gt;\n1 Adelie          3701.        152\n2 Chinstrap       3733.         68\n3 Gentoo          5076.        124\n\n\n\n3.4.1 Using group_by() and summarise() together",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data wrangling I</span>"
    ]
  },
  {
    "objectID": "data-wrangling-1.html#pivots",
    "href": "data-wrangling-1.html#pivots",
    "title": "3  Data wrangling I",
    "section": "3.5 Pivots",
    "text": "3.5 Pivots\n\n\n\n\n\n\n\n\nFigure 3.6: pivot\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.7: pivot",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data wrangling I</span>"
    ]
  }
]