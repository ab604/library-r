[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Librarians",
    "section": "",
    "text": "Preface\nThis is a book contains guidance for getting started using R, with code and examples for addressing tasks faced by the Bibliometrics Team at the University of Southampton (UoS) Library Service.\nIf you want a full guide to data analysis in R check out R for Data Science\nSome of the materials here are re-used from previous workshops I ran for biologists from 2019/20 called Coding Together.\nIf you are new to R, then the first thing to know is that R is a programming language and RStudio is program for working with R called an integrated development environment (IDE).\nYou can use R without installing RStudio, but you can’t work with R in RStudio by installing RStudio alone. Download R here and Download RStudio Desktop here.\nIf you are wondering if and/or why learning R might be useful, 1  Setting the scene should help answer those questions.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "setting-the-scene.html",
    "href": "setting-the-scene.html",
    "title": "1  Setting the scene",
    "section": "",
    "text": "1.1 The challenge\nNew often means difficult, but difficult things are also often worth doing. The quote in Note 1.1 pretty much captures my feelings about the challenge of getting started and learning R:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting the scene</span>"
    ]
  },
  {
    "objectID": "setting-the-scene.html#sec-the-challenge",
    "href": "setting-the-scene.html#sec-the-challenge",
    "title": "1  Setting the scene",
    "section": "",
    "text": "Note 1.1: Is programming hard to learn?\n\n\n\n“…programming in general…is primarily about learning to think a certain way - to decompose a problem into very simple steps each of which can be easily solved. Some people have an affinity to this – they will pick it up faster, while others will need more practice.”\nSource: The Biostar Handbook\n\n\n\n1.1.1 But why is it worth doing?\n\nMaybe it isn’t, but experience is one way to find out.\nMy experience is that in the long term, it saves me time and frees up time from doing boring repetitive tasks for doing more interesting and more complex things.\n\n1.1.2 What are we doing?\nFigure 1.1 shows a version of the data science cycle from R4DS. Conceptually, this is what we are mostly doing. In R4DS, all of these steps are done programmatically, but we won’t be trying to do everything here.\nOur focus will be on importing, tidying and transforming data, but you may wish to explore the visualisation and modeling parts of the cycle yourself. For example, check out the visualisation chapter of R4DS and Tidy Modeling with R.\nAs a librarian, your data is likely to be in a spreadsheet. We need to learn how to import that data into an environment where we can work with it and explore questions.\nIn asking and answering those questions we need to learn to transform data and/or visualise our data.\nWe then need to communicate our findings back out of our working environment to our colleagues or for our own records.\n\n\n\n\n\n\n\nFigure 1.1: A version of the data science cycle from R4DS. We will cover data importing, tidying, transformation and visualisation, but not modeling. Communication of your output is the final part of the workflow.\n\n\n\n\n\n1.1.3 How are we going to do it?\nAs per Note 1.1, step-by-step and through practice we will learn to think and work in a certain way that may be different to how you have previously worked.\nIt may seem all a bit abstract to begin with, but that is part of the point. In learning to generalise from abstractions, one can identify and apply the same concepts to lots of specific problems that may at first seem different, but are either the same or similar.\nOur guiding principles in doing this are:\n\nKeep the raw data raw.\nWrite love letters to our future selves in the form of our code and how we organise and document our data.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting the scene</span>"
    ]
  },
  {
    "objectID": "setting-the-scene.html#sec-if-youre-using-excel-you-are-already-programming",
    "href": "setting-the-scene.html#sec-if-youre-using-excel-you-are-already-programming",
    "title": "1  Setting the scene",
    "section": "\n1.2 If you’re using Excel you are already programming",
    "text": "1.2 If you’re using Excel you are already programming\nIn 2021 Excel became Turing-complete (Figure 1.2), which is a colloquial way of saying one computing language can approximate another computing language.\nIn other words, anything one can do in Python, R, C++ and so on, should also be possible in Excel.\nHence if you are using Excel, you are already a programmer.\n\n\n\n\n\n\n\nFigure 1.2: The head of Microsoft announces that Excel is Turing-complete.\n\n\n\n\nGordon Shotwell wrote a blog post called R for Excel Users that discusses the differences between Excel and R. Perhaps the biggest conceptual difference is that in Excel one is programming with the raw data - which conflicts with the guiding principles of keeping the raw data separate from the code (Section 1.1.3).\nWith most languages, the file(s) holding the data are separate from the file(s) that contains the code.\nOn the one hand programming with the raw data makes it easy to get started in Excel, but on the other hand it gets harder as the complexity of what you are trying to do increases.\nAnd vice versa.\nIn other languages getting started is harder, but it’s easier to do more complex tasks once some initial learning is done.\nIt’s really a question of whether it’s worth the investment learning R, python etc. Hence my comments in Section 1.1.1.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting the scene</span>"
    ]
  },
  {
    "objectID": "setting-the-scene.html#sec-a-little-goes-a-long-way",
    "href": "setting-the-scene.html#sec-a-little-goes-a-long-way",
    "title": "1  Setting the scene",
    "section": "\n1.3 A little goes a long way",
    "text": "1.3 A little goes a long way\nWhen considering investing in learning, it’s important to know that we don’t need to learn everything. A modest investment does yield large rewards.\nA few hours learning, backed-up with practice can be enough for many people.\nAs illustrated in Figure 1.3 there are a whole spectrum of users from practitioners at one end who are focused on applying some programming tools to their specific problems. Whilst at the other end who develop the programming tools and language itself.\nIn reality one may move around on that spectrum as ones needs and interests change over time.\n\n\n\n\n\n\n\n\nFigure 1.3: The practitioner-programmer spectrum. At one end lies practitioners who use programming tools and at the other end lies developers of programming languages and tools. The circle in-between indicates how individuals may move around on the spectrum.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting the scene</span>"
    ]
  },
  {
    "objectID": "markup-languages.html",
    "href": "markup-languages.html",
    "title": "2  Markup Languages",
    "section": "",
    "text": "2.1 What is markup?\nWikipedia has detailed pages on the history of typesetting pre and post the invention of computing. For example, the Wikipedia page on letter case describes how capital letters were often kept in the upper case of the drawers that contained the letters used in the printing press. Hence upper-case meaning capital in typesetting.\nMuch of this typography jargon naturally got carried over when computers came along, and marking up is both a digital and analogue term.\nIn the analogue sense markup is usually an instruction or comment to the author for revisions.\nIn the digital sense marking up is syntax on how to format or structure the text e.g. a heading, line break, bold or italic when it is rendered. Here you are reading Quarto markdown (Section 2.4.4) that has been rendered as a html book.\nAgain the Wikipedia markup languages page is great if you want the full details.\nMS Word documents are markup language files in a XML format.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Markup Languages</span>"
    ]
  },
  {
    "objectID": "markup-languages.html#sec-what-is-markup",
    "href": "markup-languages.html#sec-what-is-markup",
    "title": "2  Markup Languages",
    "section": "",
    "text": "As an aside, it’s often possible to make sense of computing jargon if you can trace the analogue history in the relevant domain. Such as the term layers in computer graphics deriving from layers of paper used in pre-computing design.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Markup Languages</span>"
    ]
  },
  {
    "objectID": "markup-languages.html#sec-what-is-markdown",
    "href": "markup-languages.html#sec-what-is-markdown",
    "title": "2  Markup Languages",
    "section": "\n2.2 What is markdown?",
    "text": "2.2 What is markdown?\nSo why markdown?\nReadability is the short answer, but again a longer better answer is on the Markdown Wikipedia page and the Markdown project page.\nMarkdown was created to be human readable and easy to write, as compared with heavier markup languages such as html or xml. And its growing popularity since 2004 and off-shoot flavours of markdown suggest it has been successful.\nBelow is are examples of markdown source code and outputs, where # marks up a first level header ## marks up the second level header, and ### marks up the third level header. Bullet points are marked-up with + or - .\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n# A First Level Header\nA First Level Header\n\n\n## A Second Level Header\nA Second Level Header\n\n\n### A Third Level Header\nA Third Level Header\n\n\nThis is a\nregular paragraph.\nThis is a regular paragraph.\n\n\n- A bullet point\n\nA bullet point\n\n\n\n![Caption](bibi.jpg)\n\n\nCaption\n\n\n\n\nThe heading to this chapter (Chapter 2) is a first level heading and this section has a second level heading (Section 2.2). The style e.g. font and colour and output (a html book) is controlled by another document, a configuration file.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Markup Languages</span>"
    ]
  },
  {
    "objectID": "markup-languages.html#sec-literate-prog",
    "href": "markup-languages.html#sec-literate-prog",
    "title": "2  Markup Languages",
    "section": "\n2.3 Literate programming",
    "text": "2.3 Literate programming\nLiterate programming is a concept created by Donald Knuth of mixing code and prose in the same document. The resulting document can be tangled to run the code and weaved to created a human readable document.\nIn practice this looks like chunks of prose such as the one you are reading, mixed with chunks of code such as the one below. The R code chunk calls the in-built R constant called letters that contains the 26 characters of the English alphabet. Code chunks can be set in different ways, to be visible or hidden, to evaluate the code or not, and so on. Here it is set to evaluate and print the output below.\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n\nTry LETTERS to see the diffence between letters and LETTERS.\nLiterate programming is a trade-off: it’s slow and verbose, but if written well, easier to understand and amend than traditional scripts. It suits certain tasks such as teaching and report writing. Another benefit is that it’s often possible to use the same input document to create different types of output. For example, the same R Markdown document can be published as webpage, a Word document, a PDF or a PowerPoint presentation with relatively little effort.\nLiterate programming can be done with a variety of languages, not just R, Examples of literate programming tools are Jupyter, VS Code, R Markdown and Quarto.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Markup Languages</span>"
    ]
  },
  {
    "objectID": "markup-languages.html#sec-markdown-flavours",
    "href": "markup-languages.html#sec-markdown-flavours",
    "title": "2  Markup Languages",
    "section": "\n2.4 Different flavours of markdown",
    "text": "2.4 Different flavours of markdown\nThere are a number of different flavours of markdown. By flavour I mean they all have common aspects, but differences in functionality that have been added to each version. Here are some of the common flavours.\n\n2.4.1 Markdown\nThe original markdown was created by John Gruber in 2004. It contained the syntax for text, images, tables etc. that we saw in Section 2.2. Details on the Markdown project page and in the markdown guide.\n\n2.4.2 Github flavoured markdown\nGithub flavoured markdown is the variant used by the software development platform Github. Amongst other things, it added code block functionality such as the letters code block in Section 2.3 and strikethrough text.\n\n2.4.3 R Markdown\nUnsurpisingly, R Markdown is the version of markdown developed by the creators of RStudio and incorporates lots of functionality for combining markdown and R in the literate programming paradigm (Section 2.3).\nYou can find full details in the RStudio R Markdown documentation, the R Markdown book and the R Markdown cookbook.\nIf you’re interested in more technical detail of how document creation works in R Markdown here’s a Stack overflow post explaining the relationship between R markdown knitr and pandoc\n\n2.4.4 Quarto markdown\nQuarto is created by Posit, the same company that created RStudio. It builds upon R Markdown (Section 2.4.3), but is designed to be used with a variety of languages and tools for creating technical documents and reports. It simplifies some of the quirks of R Markdown and is supposedly easier for creating dynamic content such as dashboards.\nAs someone who started with LaTeX and then moved to R Markdown I’ve found it fairly straightfoward to change to Quarto and prefer it. Quarto comes bundled with RStudio from v2022.07.1, so we’ll use Quarto for our exercises.\nThere’s nothing wrong with sticking with R Markdown if you prefer it or feel it’s too much effort to change. But if you have exisiting R Markdown files and want to switch, you’ll find it’s fairly easy to convert them into Quarto markdown and may find long term benefits.\nWe can create a new document in R Studio from the File menu and then New File displays all the default file types available as shown in Figure 2.1. Here I highlighted a new Quarto Document.\n\n\n\n\n\n\n\nFigure 2.1: Creating a new document in R Studio from the File menu\n\n\n\n\nSelecting Quarto Document opens a dialogue box as shown in Figure 2.2, giving us the opportunity to set various features such as the default output document format or whether we want to create a document or presentation. This can all be changed later, so don’t worry if you change your mind.\n\n\n\n\n\n\n\nFigure 2.2: Quarto Document dialogue box",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Markup Languages</span>"
    ]
  },
  {
    "objectID": "markup-languages.html#sec-pandoc",
    "href": "markup-languages.html#sec-pandoc",
    "title": "2  Markup Languages",
    "section": "\n2.5 Publishing outputs with Pandoc",
    "text": "2.5 Publishing outputs with Pandoc\nPandoc created in 2006 by John MacFarlane to convert one markup format to another, including HTML, XML, MS Word, PDF and all the various flavours of markdown.\nAs mentioned in Section 2.3, it can be quite time saving to write in a single markdown language and then create the various output documents as required for yourself or your collaborators.\nRStudio comes bundled with pandoc so there’s no need to install it separately (unlesss you want to). Pandoc can be used independently of RStudio if you are willing to learn how to do data science at the command line. Perhaps a problem for another day?!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Markup Languages</span>"
    ]
  },
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "3  Getting started",
    "section": "",
    "text": "3.1 What is R?\nR is a programming language that follows the philosophy laid down by it’s predecessor S. The philosophy being that users begin in an interactive environment where they don’t consciously think of themselves as programming. It was created in 1993, and documented in (Ihaka and Gentleman 1996).\nReasons R has become popular include that it is both open source and cross platform, and that it has broad functionality, from the analysis of data and creating graphical visualisations and web apps.\nLike all languages though it has limitations, for example the syntax is initially confusing.\nJumping Rivers maintains a list of useR groups and meetings, such as the R-Ladies group.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#sec-rstudio",
    "href": "getting-started.html#sec-rstudio",
    "title": "3  Getting started",
    "section": "\n3.2 What is RStudio?",
    "text": "3.2 What is RStudio?\nR is the language and RStudio is software created to facilitate our use of R. They are installed separately. You don’t need RStudio to use R, but you do need R to used RStudio.\nRStudio is an interactive development environment (IDE). It can be used to write code, navigate the files found on our computer, inspect the variables we are going to create, and visualize the plots. RStudio can also be used for other languages and other tasks (e.g., version control, developing packages, writing Shiny apps) that are beyond the scope here.\nFigure 3.1 shows the default view of the RStudio. It is divided into “Panes”.\nWhen you first open RStudio, there are three panes,the console where you type commands, your environment/history (top-right), and your files/plots/packages/help/viewer (bottom-right).\n\n\n\n\n\n\n\nFigure 3.1: RStudio is an interactive development environment (IDE). This the default view of the R console, environment and output panes. These can be rearranged as desired.\n\n\n\n\nThe environment shows all the R objects you have created or are using, such as data you have imported.\nThe output pane can be used to view any plots you have created.\nNot opened at first start up is the fourth default pane: the script editor pane, but this will open as soon as we create/edit a R script (or many other document types). The script editor is where will be typing much of the time.\nThe placement of these panes and their content can be customized (see menu, R Studio -&gt; Tools -&gt; Global Options -&gt; Pane Layout). One of the advantages of using R Studio is that all the information you need to write code is available in a single window. Additionally, with many short-cuts, auto-completion, and highlighting for the major file types you use while developing in R, R Studio will make typing easier and less error-prone.\n\n\n\n\n\n\nShortcuts\n\n\n\nRStudio has lots of keyboard shortcuts to make coding quicker and easier. Try to find the menu listing all the keyboard shortcuts, including the short-cut to find the menu!\n\n\nTime for another philosophical diversion…\n\n3.2.1 What is real?\nAt the start, we might consider our environment “real”, that is to say the objects we’ve created/loaded and are using are “real”.\nBut it’s much better in the long run to consider our scripts as “real”.\n\n\n\n\n\n\nOur scripts are where we write down the code that creates our objects that we’ll be using in our environment.\nAs a script is a document, it is reproducible.\n\n\n\nOr to put it another way: we can easily recreate an environment from our scripts, but not so easily create a script from an environment.\nTo support the notion of thinking in terms of our scripts as real, it is recommended to turn off the preservation of workspaces between sessions by setting the Tools &gt; Global Options menu in R studio as shown in Figure 3.2\n\n\n\n\n\n\n\nFigure 3.2: It is recommended to turn off the preservation of workspaces between sessions by setting Save workspace to .RData on exit to Never\n\n\n\n\n\n3.2.2 Where am I?\nThe part of your computer operating system that manages files and directories (aka folders) is called the file system. This dates back to 1969 and the Unix filesystem.\nThe idea is that we have a rooted tree, as with phylogenetic rooted trees in biology. From the root all other directories and files exist along paths going back to the root as shown in Figure 3.3.\nOn Unix based systems such as Apple or Android, the root is denoted with a forward slash /. On Windows the root is a back slash \\. The / or \\ is used to to separate directories along the path, denoting a change in the level of the tree\nNote: in RStudio the path separator and root is always / regardless of the operating system.\n\n3.2.2.1 Absolute path from the root /\n\nFigure 3.3 shows the absolute path from the root to folder H as a red line.\nThis is just a made-up example, but in text in this would be /B/E/H.\nOn a Windows machine the root path may start with the hard drive name e.g. C:/ and on an Apple or Linux machine it will just begin /.\n\n\n\n\n\n\n\nFigure 3.3: The absolute path from the root / through sub-folders B and E to folder H is shown by the red line.\n\n\n\n\n\n\n\n\n\n\nIn the R console, the function getwd() will show your current working directory as an absolute path from the root.\nThe path is also shown at the top of the R console.\n\n\n\n\n3.2.3 Relative path from where you are\nWe can also consider relative paths, paths that are relative to each file or folder rather than the root.\nImagine I have project called penguin-project and I have a script in the R folder that analyses data in a spreadsheet in the data folder.\nFigure 3.4 shows the relative path between analysis-2024-02-27.R and the spreadsheet survey-2024-02-27.csv.\nIn natural language from the R script to access the spreadsheet we would need to “go up from the R directory to the project directory and then back down into the data directory”.\nIn machine readable language from our R script the relative path would be written as ../data/survey-2024-02-27.csv where ../ means go up one level from where the script is.\n\n\n\n\n\n\n\nFigure 3.4: The relative path between the R script analysis-2024-02-27.R in the R folder and the and the spreadsheet survey-2024-02-27.csv used by the R script in the data folder is shown in red.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#sec-packages",
    "href": "getting-started.html#sec-packages",
    "title": "3  Getting started",
    "section": "\n3.3 Installing and loading packages",
    "text": "3.3 Installing and loading packages\nPackages are collections of functions, and a function is a piece of code written to perform a specific task, such as installing a package.\nTherefore, the function install.packages() is a piece of code written to perform the task of installing packages.\nWe use the function by typing install.packages(\"tidyverse\") with the name of the package in quotes inside the round brackets.\nHere the package is tidyverse. Using the console panel to type this and pressing Enter will run the function.\nWe of course need to know the name of the packages we are interested in.\nOnce a package is installed we need to load it into our environment to use it. Loading packages is performed using the library() function. As with installation, we put the name of the package - the argument for our function - that we want to load in between the round brackets like so library(tidyverse).\nAs before this can be done on the console, but we will usually load packages as part of script. Note that we don’t need the quotes for the library function.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#sec-what-is-a-function",
    "href": "getting-started.html#sec-what-is-a-function",
    "title": "3  Getting started",
    "section": "\n3.4 What is a function and how do I use them?",
    "text": "3.4 What is a function and how do I use them?\nA function is a piece of code written to perform a specific task. Functions in R have the syntax of the name of the function followed by round brackets. The round brackets are where we type the arguments that the function requires to carry out its task. For example, in Section 3.3 the function install.packages() requires the name of the package we want to install as arguments.\nMany, if not most, functions can take more than one argument. The creators of the function should have given these defaults for the situation where the user provides only one or some arguments. RStudio should prompt you for the arguments as you type, but if you need to see what they are, use the help function ? with the function name in the Console and it will open the help panel or type the function name into the help panel search box.\nFor example, to find out all the arguments for install.packages() we’d type ?install.packages and press Enter.\n\n\n\n\n\n\nTry installing the cowsay package\n\n\n\nInstall and load cowsay with the install.packages() and library() functions. cowsay has one function called say() that you can use to create messages with animals.\n\n\n\n ----- \nUse ?say to open the help\ndocumentation for the say() function. \n ------ \n    \\   ^__^ \n     \\  (oo)\\ ________ \n        (__)\\         )\\ /\\ \n             ||------w|\n             ||      ||\n\n\n\n\n\n3.4.1 Introducing the Palmer Penguins\nThe Palmer Penguins package is a dataset curated by Allison Horst of data on three penguin species from the Palmer Station in Antarctica (Figure 3.5).\n\n\n\n\n\n\n\nFigure 3.5: Hex sticker of the Palmer Penguins package curated by Allison Horst showing the Chinstrap, Gentoo and Adélie penguins.\n\n\n\n\nIt’s a great dataset for getting started with and you can install it like so:\n\ninstall.packages(\"palmerpenguins\")\n\nThe three penguins species are the Chinstrap, Gentoo and Adélie penguins (Figure 3.6).\n\n\n\n\n\n\n\nFigure 3.6: Artwork by @allison_horst of the Chinstrap, Gentoo and Adélie penguins.\n\n\n\n\nThe dataset records various information about 344 penguins, including their culmen (Figure 3.7).\n\n\n\n\n\n\n\nFigure 3.7: Artwork by @allison_horst of the culman of a Gentoo penguin.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#sec-a-project-orientated-workflow",
    "href": "getting-started.html#sec-a-project-orientated-workflow",
    "title": "3  Getting started",
    "section": "\n3.5 A project orientated workflow",
    "text": "3.5 A project orientated workflow\nThis section is all about how to use R and RStudio to “maximize effectiveness and reduce frustration.”\nThe above quote is from Jenny Bryan’s article about a project orientated workflow.\nThe main point here is that how you do things, the workflow, should not be mixed up with the product of the workflow itself.\nThe product being:\n\nthe raw data.\nthe code needed to produce the results from the raw data.\n\nWays in which you can mix workflow and product include having lines in your script that set your working directory, or using RStudio to save your environment when you are working.\nBut why is this a problem?\nIt’s because your computer isn’t my computer or my laptop isn’t my desktop or I’m now using a Windows machine and I wrote the code two years ago on a Mac.\nBy hard coding the directory into a script I have ensured my code will only run on the machine in which it was written. Chances are you will want to share your code with someone, either for publication or for them to check your work, or because you are working collaboratively and therefore we need to avoid mixing workflow with product.\nLikewise we can’t share environments directly, but we can share the code that creates the environment.\nIf we organise our analysis into self-contained projects that hold everything needed to perform the analysis. These projects can be shared across machines and the analysis recreated, and thus the workflow is kept separate from the product.\nWhat does this look like in practice?\n\n3.5.1 RStudio Projects\nStep one is to use an interactive development environment such as RStudio rather than using R on its own for your analysis.\nRStudio contains a facility to keep all files associated with a particular analysis together called, as you might expect from Section 3.5, a Project.\nCreating a Project creates a file .Rproj containing all the information associated with your analysis including the Project location (allowing you to quickly navigate to it), and optionally preserves custom settings and open files to make it easier to resume work after a break. This is also super helpful if you are working on multiple projects as you can switch between them at a click.\n\n\n\n\n\n\n\nFigure 3.8: Starting a new R project in RStudio\n\n\n\n\nThese the steps for creating an Project in a new folder:\n\nStart R Studio (presentation of R Studio -below- should happen here)\nUnder the File menu, click on New project, choose New directory, then Empty project\n\nEnter a name for this new folder (aka directory), and choose a convenient location for it. This will be your working directory for the project.\nClick on Create project\n\n\n3.5.2 Naming things\nJenny Bryan also has three principles for naming things that are well worth remembering.\nWhen you names something, a file or an object, ideally it should be:\n\nMachine readable (no white space, punctuation, upper and lower-case)\nHuman readable (makes sense in 6 months or 2 years time)\nPlays well with default ordering (numerical or date order)\n\nWe’ll see examples of this as we go along.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#sec-base-r-tidyverse",
    "href": "getting-started.html#sec-base-r-tidyverse",
    "title": "3  Getting started",
    "section": "\n3.6 Base R, the tidyverse and tidy data",
    "text": "3.6 Base R, the tidyverse and tidy data\nBase R is everything that comes included when you install the R language, whereas the tidyverse has have to be installed in addition to base R. The tidyverse eight core packages that are loaded when the tidyverse library is loaded, but installs a number of other tidyverse packages that can be load separately using the library function.\nThe key difference between base R and the tidyverse is that the tidyverse uses functions named as verbs with a single purpose, whereas base R syntax can be used for multiple purposes.\nThis trade-off I’d characterise as cognitive ease versus flexibility.\nThe tidyverse website has extensive materials for learning more about the tidyverse. And Hands on Programming with R provides a base R view.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#sec-tidy-data",
    "href": "getting-started.html#sec-tidy-data",
    "title": "3  Getting started",
    "section": "\n3.7 Tidy data",
    "text": "3.7 Tidy data\nTidy data follows three principals for tabular data as proposed in the Tidy Data paper (Wickham 2014):\n\nEach variable is a column; each column is a variable.\nEach observation is a row; each row is an observation.\nEach value is a cell; each cell is a single value.\n\nThis is illustrated in Figure 3.9 using a part of the Palmer Penguins dataset (Section 3.4.1). The eight variables in the columns form an observation for each penguin in every row, and each cell has a single value recorded.\n\n\n\n\n\n\n\nFigure 3.9: Some tidy data from the penguin dataset. Every variable has it’s own column, every observation has its own row and every value has its own cell.\n\n\n\n\nHadley Wickham explains in R4DS tidy data:\n\nWhy ensure that your data is tidy? There are two main advantages:\n\nThere’s a general advantage to picking one consistent way of storing data. If you have a consistent data structure, it’s easier to learn the tools that work with it because they have an underlying uniformity.\nThere’s a specific advantage to placing variables in columns because it allows R’s vectorized nature to shine.\n\n\nThis will hopefully become apparent in Chapter 4 and Chapter 5.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#sec-atoms",
    "href": "getting-started.html#sec-atoms",
    "title": "3  Getting started",
    "section": "\n3.8 Atoms of R",
    "text": "3.8 Atoms of R\nHaving set ourselves up in RStudio, let’s turn our attention to the language of R itself.\nThe basic building blocks of how R stores data are called atomic vector types. It’s from these atoms that more complex structures are built. Atomic vectors have one dimension, just like a single row or a single column in a spreadsheet.\nThese are the building blocks of more complex data containers such as data frame (Section 3.10.3) containing the penguin dataset (Section 3.4.1).\nThe four main atoms of R are:\n\nDoubles: regular numbers, +ve or -ve and with or without decimal places. AKA numerics.\nIntegers: whole numbers, specified with an upper-case L, e.g. int &lt;- 2L\n\nCharacters: Strings of text\nLogicals: these store TRUE‘s and FALSE’s’ which are useful for comparisons.\n\n\n\n\n\n\n\n\nFigure 3.10: The atomic R data types that form the building blocks of more complex data containers.\n\n\n\n\nLet’s make a character vector and check the atomic vector type, using the typeof(). This also introduces a very important R function c(). This lower case c stands for combine. So when we have several objects e.g. words or numbers, we can combine them into a vector the length of the number of objects, as illustrated here for a pack of cards:\n\ncards &lt;- c(\"ace\", \"king\", \"queen\", \"jack\", \"ten\")\n\ncards\n\n[1] \"ace\"   \"king\"  \"queen\" \"jack\"  \"ten\"  \n\ntypeof(cards)\n\n[1] \"character\"\n\n\nNote here that we see the use of the assignment operator &lt;- to assign our vector on the right as the object cards. We talk more about that in Section 3.9.\nAlso note that the output of typeof() is itself a vector of length one and type character.\n\n\n\n\n\n\nTry creating a vector of integers\n\n\n\nUse the seq() function to create a vector of numbers from 1 to 10, and typeof() to examine the vector type.\nRemember to use ?seq if you want to learn more about the function.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#sec-assigning-objects",
    "href": "getting-started.html#sec-assigning-objects",
    "title": "3  Getting started",
    "section": "\n3.9 Assigning objects",
    "text": "3.9 Assigning objects\nObjects are how we store data inside the R environment. We assign labels to objects using the assignment operator &lt;-\n\nmass_kg &lt;- 55\n\nRead this as “mass_kg is assigned to value 55” in your head. A subtle but important point here is that the object is 55 and the value remains 55 regardless of the label we assign to it.\nIn fact we could assign more than one label to the same object. Another way to think about this is that Bibi is a cat (Figure 3.11), and remains a cat even if I call her Pickle when she’s being naughty.\n\n\n\n\n\n\n\nFigure 3.11: Bibi is of data type cat regardless of her name.\n\n\n\n\nUsing &lt;- can be annoying to type, so use RStudio’s keyboard short cut: Alt + - (the minus sign) to make life easier.\nMany people ask why we use this assignment operator when we can use = instead?\nColin Fay had a Twitter thread on this subject, but the reason I favour most is that it provides clarity. The arrow points in the direction of the assignment (it is actually possible to assign in the other direction too) and it distinguishes between creating an object in the workspace and assigning a value inside a function.\nObject name style is a matter of choice, but must start with a letter and can only contain letters, numbers, _ and .. We recommend using descriptive names and using _ between words. Some special symbols cannot be used in variable names, so watch out for those.\nSo here we’ve used the name to indicate its value represents a mass in kilograms. Look in your environment pane and you’ll see the mass_kg object containing the (data) value 55.\nWe can inspect an object by typing it’s name:\n\nmass_kg\n\n[1] 55\n\n\nWhat’s wrong here?\n\nmass_KG\n\nError: object 'mass_KG' not found\nThis error illustrates that typos matter, everything must be precise and mass_KG is not the same as mass_kg. mass_KG doesn’t exist, hence the error.\nLet’s use seq() to create a sequence of numbers, and at the same time practice tab completion.\nStart typing se in the console and you should see a list of functions appear, add q to shorten the list, then use the up and down arrow to highlight the function of interest seq() and hit Tab to select. This is tab completion.\nRStudio puts the cursor between the parentheses to prompt us to enter some arguments. Here we’ll use 1 as the start and 10 as the end:\n\nseq(1,10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nIf we left off a parentheses to close the function, then when we hit enter we’ll see a + indicating RStudio is expecting further code. We either add the missing part or press Escape to cancel the code.\nLet’s call a function and make an assignment at the same time. Here we’ll use the base R function seq() which takes three arguments: from, to and by.\nRead the following code as “assign my_sequence to an object that stores a sequence of numbers from 2 to 20 by intervals of 2.\n\nmy_sequence &lt;- seq(2,20,2)\n\nThis time nothing was returned to the console, but we now have an object called my_sequence in our environment.\n\n3.9.1 Indexing and sub-setting\nIf we want to access and subset elements of my_sequence we use square brackets [] and the index number. Indexing in R starts at 1 such that 1 is the index of the first element in the sequence, element 1 having the the value of 2.\nFor example element five would be subset by:\n\nmy_sequence[5]\n\n[1] 10\n\n\nHere the number five is the index of the vector, not the value of the fifth element. The value of the fifth element is 10.\nAnd returning multiple elements uses a colon :, like so\n\nmy_sequence[5:8]\n\n[1] 10 12 14 16",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#sec-lists",
    "href": "getting-started.html#sec-lists",
    "title": "3  Getting started",
    "section": "\n3.10 Lists, matrices, arrays and data frames",
    "text": "3.10 Lists, matrices, arrays and data frames\nLists also group data into one dimensional sets of data. The difference being that list group objects instead of individual values, such as several atomic vectors.\nFor example, let’s make a list containing a vector of numbers and a character vector\n\nlist_1 &lt;- list(1:110,\"R\")\n\nlist_1\n\n[[1]]\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108\n[109] 109 110\n\n[[2]]\n[1] \"R\"\n\n\nNote the double brackets to indicate the list elements, i.e. element one is the vector of numbers and element two is a vector of a single character.\nWe won’t be working with lists, but they are a flexible way to store data of different types in R.\nAccessing list elements uses double square brackets syntax, for example list_1[[1]] would return the first vector in our list.\nAnd to access the first element in the first vector would combine double and single square brackets like so: list_1[[1]][1].\nDon’t worry if you find this confusing, everyone does when they first start with R. Hadley Wickham tweeted an image to illustrate list indexing shown in Figure 3.12.\n\n\n\n\n\n\n\nFigure 3.12: List indexing by Hadley Wickham\n\n\n\n\nLists and NULL which indicates the absence of a vector, complete the set of base vectors in R as illustrated in Figure 3.13.\n\n\n\n\n\n\n\nFigure 3.13: The base vectors of R includes Lists and NULL vectors in addition to the atomic vectors.\n\n\n\n\n\n3.10.1 Matrices and arrays\nAtomic vectors have one dimension, one row or one column. Matrices are an object type that store data of the same type in a two dimensional array like a table.\nWhereas arrays can have N dimensions, which makes them hard to imagine. We won’t be using these either, but they are also valid R objects\n\n3.10.2 Categorical data aka Factors\nFactors are Rs way of storing categorical information such as eye colour or car type. A factor is something that can only have certain values, and can be ordered (such as low,medium,high) or unordered such as types of fruit.\nFactors are useful as they code string variables such as “red” or “blue” to integer values e.g. 1 and 2, which can be used in statistical models and when plotting, but they are confusing as they look like strings.\nFactors look like strings, but behave like integers.\nHistorically R converts strings to factors when we load and create data, but it’s often not what we want as a default. Since R version 4.0.0 strings not treated as factors by default.\n\n3.10.3 Data frames\nFor data analysis in R, we mostly be using data frames.\nData frames are two dimensional versions of lists in that they can contain different data types in the same object (unlike matrices or arrays). This is form of storing data we are going to be using and is encountered day-to-day in the library.\nIn a data frame each atomic vector type becomes a column, and a data frame is formed by columns of vectors of the same length. Each column element must be of the same type, but the column types can vary.\nFigure 3.14 shows an example data frame we’ll refer to as saved as the object df consisting of three rows and three columns. Each column is a different atomic data type of the same length.\n\n\n\n\n\n\n\nFigure 3.14: An example data frame df with three rows and three columns. The first column is a numeric vector, the second a character vector and the third a logical vector.\n\n\n\n\n\ndf &lt;- data.frame(numeric_vector = c(1,7,3), \n                 character_vector = c(\"S\",\"A\",\"U\"),\n                 logical_vector = c(TRUE,FALSE,TRUE), \n                 stringsAsFactors = FALSE)\n\ndf\n\n  numeric_vector character_vector logical_vector\n1              1                S           TRUE\n2              7                A          FALSE\n3              3                U           TRUE\n\n\nPackages in the tidyverse create a modified form of data frame called a tibble. You can read about tibbles here.\nHere’s what the code to make the same data frame as before as a tibble looks like. Note how we get more information from a tibble when it is returned to the Console, it tells us what the dimensions are, and what type of vectors it contains.\nNote that I have to load the tibble package as it is not a base R function. Also note the difference in the way the information about df and tbl_df are displayed.\n\nlibrary(tibble)\n\ntbl_df &lt;- tibble(numeric_vector = c(1,7,3), \n                 character_vector = c(\"S\",\"A\",\"U\"),\n                 logical_vector = c(TRUE,FALSE,TRUE))\n\ntbl_df\n\n# A tibble: 3 × 3\n  numeric_vector character_vector logical_vector\n           &lt;dbl&gt; &lt;chr&gt;            &lt;lgl&gt;         \n1              1 S                TRUE          \n2              7 A                FALSE         \n3              3 U                TRUE          \n\n\nSub-setting data frames can also be done with square bracket syntax, but as we have both rows and columns, we need to provide index values for both row and column.\nFor example df[1,2] means return the value of df row 1, column 2. This corresponds with the value A.\nWe can also use the colon operator to choose several rows or columns, and by leaving the row or column blank we return all rows or all columns.\n\n# Subset rows 1 and 2 of column 1\ndf[1:2,1]\n\n[1] 1 7\n\n# Subset all rows of column 3\ndf[,3]\n\n[1]  TRUE FALSE  TRUE\n\n\nDon’t worry too much about this for now, we won’t be doing this, but it’s worth being aware of this syntax.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#sec-plotting-and-exporting-data",
    "href": "getting-started.html#sec-plotting-and-exporting-data",
    "title": "3  Getting started",
    "section": "\n3.11 Plotting and exporting data",
    "text": "3.11 Plotting and exporting data\n\nOne of the most useful and important parts of any data analysis is plotting data. To give you an example, we’ll use the ggplot2 package as an introduction to automating a task in code, and as a tool for understanding data.\nggplot2 implements the grammar of graphics, for describing and building graphs. The idea being that we construct a plot in the following way:\n\nCall the ggplot() function to create a graph.\nPass our data as the first argument to the ggplot() function.\nThen pass some arguments to the aesthetics function aes() inside the gpplot() which tell ggplot how to plot the data e.g. which data goes on the x and y axis.\nThen we follow the ggplot function with a + sign to indicate we are going to add more code, followed by a geometric object function, a geom which maps the data to type of plot we want to make e.g. a histogram or scatter plot.\n\nDon’t worry if this sounds confusing, it becomes clear with practice and all plots follow this grammar.\nWe’ll use the pengiuns from the Palmer Penguins (Section 3.4.1) dataset to the question what is the relationship between body mass and flipper length?\nTry ?penguins to learn more about the data.\n\nPenguin mass in grams is in the body_mass_g column.\nFlipper length is in the flipper_length_mm column.\n\nTo create a plot of penguin mass body_mass_g (x-axis) against flipper length flipper_length_mm (y-axis) we do the following:\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins) + \n  geom_point(mapping = aes(x = body_mass_g, y = flipper_length_mm))\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning messages\n\n\n\nWhen we created the plot we got a message:\nWarning: Removed 2 rows containing missing values ('geom_point()').\nThis is telling us that two rows have missing values for either the flipper length or body mass and therefore couldn’t be plotted.\nR and ggplot2 give us warnings like this to help us stop and think. This time we can safely ignore the warning, but in general we should investigate and document our choices.\n\n\nOur initial plot shows as we might expect, bigger penguins have bigger flippers.\nNow try extending this code to include to add a colour aesthetic to the the aes() function, let colour = species, so we can see the different sizes of the penguin species.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\nggplot(data = penguins) + \n  geom_point(mapping = aes(x = body_mass_g, y = flipper_length_mm, \n                           colour = species))\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n\nNow we can see that in addition to the relationship betweeen body mass and flipper length, that Adélie and Chinstrap penguins are approximately the same in mass and flipper length, whilst Gentoo penguins are generally heavier with bigger flippers..\nCheck out the ggplot2 documentation for all the aesthetic possibilities (and Google for examples).\nSo now we have re-usable code snippet for generating plots in R:\n\nggplot(data = &lt;DATA&gt;) + \n  &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;))\n\nConcretely, in our first example &lt;DATA&gt; was penguins, the &lt;GEOM_FUNCTION&gt; was geom_point() and the arguments we supplies to map our aesthetics &lt;MAPPINGS&gt; were x = body_mass_g, y = flipper_length_mm.\nAs we can use this code for any tidy data set, hopefully you are beginning to see how a small amount of code can do a lot.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#exporting-data",
    "href": "getting-started.html#exporting-data",
    "title": "3  Getting started",
    "section": "\n3.12 Exporting data",
    "text": "3.12 Exporting data\nWe’ll spend more time on getting data in and out of our R environment in the Chapter 4, but let’s imagine we wanted to export our plot and the penguin data for a colleague or presentation.\n\n3.12.1 readr\nTo export tibbles and data frames, we’ll use the readr package, and the write_excel_csv() function. This creates a table in comma separated variable format that can opened by spreadsheet software such as excel.\nAs it is a function is has round brackets and the main arguments we pass are the object containing the data we want to output and the name of the file and the location we want to write the file to, in this case the outputs folder.\nI’m also going to use the glue package and glue() function combined with base R function Sys.Date() to create a filename which is a character vector using today’s date.\nSo the syntax here is of one function nested inside another function: write_excel_csv(&lt;data&gt;, glue(&lt;output-file&gt;)) and glue() has a third function Sys.Date() called from within it too. So it’s a bit confusing at first.\n\nlibrary(glue)\n# Write csv file to outputs folder with today's date\nwrite_excel_csv(penguins, \n                glue(\"outputs/penguin-data-{Sys.Date()}.csv\")\n                )\n\n\n\n\n\n\n\nglue evaluation\n\n\n\nWe’ve not seen this syntax before, but glue is a tidyverse package for working with strings.\nUsing curly brackets {} the glue() function will paste together and evaluate values from R objects with strings of characters.\nThis has lots of uses, but to aid your understanding here’s an example where I create two single value vectors, one character and the other integer for Bibi the cat and then use glue to insert them into a sentence.\n\nlibrary(glue)\nname &lt;- \"Bibi\"\nage &lt;- 11\n\nglue(\"My neighbour's cat is called {name} and this year she \n     will be {age+1} years old.\")\n\nMy neighbour's cat is called Bibi and this year she \nwill be 12 years old.\n\n\nNote that glue evaluates the expression age+1.\n\n\nHere we are writing the penguins data frame as a csv file to the outputs folder and a file called outputs/penguin-data-2024-04-09.csv. The date in the filename is the date I built this book (2024-04-09)\n\n3.12.2 ggsave\nIf we want to save the last plot we made in ggplot2 we can use the ggsave() function.\nWe tell ggsave() the filename, and it will save it as that type depending on how we name the file. For example if we use file.png it will save a png and if we use file.jpeg it will save a jpeg.\nCheck out ?ggsave or the link above for more arguments we can supply to ggsave(), such as plot width and height, resolution or background colour.\nTo save our last plot for example using glue() again to automatically provide the date.\n\nggsave(\n  glue(\"outputs/penguins-mass-vs-flipper-plot-{Sys.Date()}.png\")\n  )",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "getting-started.html#sec-help-and-resources",
    "href": "getting-started.html#sec-help-and-resources",
    "title": "3  Getting started",
    "section": "\n3.13 Help and resources",
    "text": "3.13 Help and resources\n\n3.13.1 Using ? to access R function help pages\nIf you need help with a specific R function, let’s say barplot(), you can type\nthe function name without round brackets, with a question mark at the start:\n\n?barplot\n\n\n3.13.2 AI assistance\nThe introduction of GPT-4 and other powerful large language models such as Claude 3 and Gemini 1.5 since 2023 has meant that these tools are now some of the best ways to get help. with coding.\nAt the time of writing I’m still a novice in using them, but I highly recommend Ethan Mollick’s work as a good place to start. He’s written posts on writing prompts and has resources such as the prompt library for Open AI’s ChatGPT.\nI started with Claude 3 from Anthrophic. One reason I chose Claude is because of its documentation and prompt library.\nFor example, Figure 3.15 shows how I prompted Claude 3 to help me reproduce the example I’d already created in Section 4.4.1.\n\n\nFirst I told Claude who I wanted it to be:\n\nYou are an R programmer called Belle and you provide guidance on writing \ntidyverse code in R. Output should be commented code snippets.\n\n\n\nThen I asked my new assistant Belle what I wanted:\n\nCan you show me how filter the palmer penguins dataset for penguins \nwith a bill length greater or equal to 50 mm?\n\n\n\n\n\n\n\n\n\n\nFigure 3.15: An example of using Claude 3 to create a R assistant that then showed me how to write the code to filter the Palmer Penguins data for bill length &gt;= 50 mm.\n\n\n\n\nBelle gave me a very good answer, but used the pipe operator %&gt;% from magrittr rather than the native R pipe |&gt; (Section 4.2). So I asked Belle to change it. (“Can you” and “please” are probably redundant, but in my learning curve I’ve started by treating the models as people!)\nCan you change this to use the native R pipe please?\nBelle gets it perfect second time, Figure 3.16.\n\n\n\n\n\n\n\nFigure 3.16: An example of updating my Claude 3 R assistants ouput to show me how to write the code to filter the Palmer Penguins data for bill length &gt;= 50 mm using the native R pipe operator.\n\n\n\n\nObviously, user beware! I know this is correct, but you’ll need to check any outputs you get. But hopefully you can see how powerful this is. Another use case would be to input you code and ask your assistant to draft you some documentation. And so on.\n\n3.13.3 Using Google to find R answers\nA Google or internet search “R &lt;task&gt;” will often either send you to the appropriate package documentation or a helpful forum question that someone else already asked, such as the RStudio Community or Stack Overflow.\n\n3.13.4 Asking questions\nAs well as knowing where to ask, the key to get help from someone is for them to grasp your problem rapidly. You should make it as easy as possible to pinpoint where the issue might be.\nTry to use the correct words to describe your problem. For instance, a package is not the same thing as a library. Most people will understand what you meant, but others have really strong feelings about the difference in meaning. The key point is that it can make things confusing for people trying to help you. Be as precise as possible when describing your problem.\nIf possible, try to reduce what doesn’t work to a simple reproducible example otherwise known as a reprex.\nFor more information on how to write a reproducible example see this article using the reprex package.\n\n3.13.5 News, tutorials other online books\nR weekly provides a round-up of what’s new in R, including packages and tutorials.\nThe creators of RStudio have Posit recipes to illustrate how to do common data tasks.\nThe big book of R contains links to many on-line books for learning R across various subject areas.\n\n\n\n\nIhaka, Ross, and Robert Gentleman. 1996. “R: A Language for Data Analysis and Graphics.” Journal of Computational and Graphical Statistics 5 (3): 299–314. https://doi.org/10.2307/1390807.\n\n\nWickham, Hadley. 2014. “Tidy Data.” Journal of Statistical Software 59 (September): 1–23. https://doi.org/10.18637/jss.v059.i10.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting started</span>"
    ]
  },
  {
    "objectID": "data-wrangling-1.html",
    "href": "data-wrangling-1.html",
    "title": "4  Data wrangling I",
    "section": "",
    "text": "4.1 Organising your data in spreadsheets\nData Organization in Spreadsheets by Karl W. Broman & Kara H. Woo is full of practical advice and context. It is well worth reading for helping you think about best practices for organising your data for yourself, and when working with others.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data wrangling I</span>"
    ]
  },
  {
    "objectID": "data-wrangling-1.html#sec-spreadsheets",
    "href": "data-wrangling-1.html#sec-spreadsheets",
    "title": "4  Data wrangling I",
    "section": "",
    "text": "4.1.1 Plain formats and Excel files\nFile formats like .csv and .tsv, comma separated variables and tab separated variables respectively are plain text files. That is to say they contain only the data, as text information, and are the simplest and most convenient way to share data as lots of software, including Excel, can read and interpret them.\nExcel files saves files into its own proprietary format .xls or .xlsx that holds information in addition to the data itself (metadata). For reading and writing excel files in R, tidyverse readxl package is the place to start: readxl homepage.\nWhen we install the tidyverse packages, readxl is installed, but not loaded by default when we load library(tidyverse) so we have to load it separately, library(readxl).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data wrangling I</span>"
    ]
  },
  {
    "objectID": "data-wrangling-1.html#sec-the-pipe",
    "href": "data-wrangling-1.html#sec-the-pipe",
    "title": "4  Data wrangling I",
    "section": "\n4.2 The pipe |>\n",
    "text": "4.2 The pipe |&gt;\n\nThe pipe operator |&gt; allows you to combine operations by passing the output of an object or function to another. It will make more sense why this is a good thing once we start writing code, but you can think of it as a coding adverb such as then.\nIn the example below, the penguins data frame is piped to the count function from dplyr (Section 4.3) which has the species column as its argument.\nThink of it as: Return the penguins table then count how many rows there are for each different penguin species.\nNote that as I am not assigning the output to an object with &lt;- (Section 3.9) the output is returned to the console.\n\n\n\n\n\n\nPipe style\n\n\n\nThe recommended pipe style is a space before a pipe and the pipe to be the last thing on a line, like so:\n\npenguins |&gt; \n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\nThis makes reading and adding new steps easier.\n\n\nThe pipe |&gt; was added to R as of version 4.1.0 , you may see the %&gt;% pipe from the magrittr package sometimes, but it’s simpler to use the native version. However, you may need to check the native pipe is enabled in the Options (Figure 4.1).\n\n\n\n\n\n\n\nFigure 4.1: Setting the native pipe |&gt; option in RStudio\n\n\n\n\nThe shortcut for the pipe operator is Ctl+Shift+M on Windows or Cmd+Shift+M on a Mac.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data wrangling I</span>"
    ]
  },
  {
    "objectID": "data-wrangling-1.html#sec-introducing-dplyr",
    "href": "data-wrangling-1.html#sec-introducing-dplyr",
    "title": "4  Data wrangling I",
    "section": "\n4.3 Introducing dplyr\n",
    "text": "4.3 Introducing dplyr\n\ndplyr “is a grammar of data manipulation”. Concretely, it’s a package of functions from the tidyverse that have been created for tasks that require manipulation of data stored in data frames Section 3.10.3.\nAs mentioned in Section 3.6, the grammar is the naming of the functions as verbs. Personally, I find this parallel between R code and human language makes things cognitively easier for me. I can describe what I want to do using natural language and translate it easily into tidyverse code.\n\n\n\n\n\n\n\nFigure 4.2: Why is it called dplyr?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data wrangling I</span>"
    ]
  },
  {
    "objectID": "data-wrangling-1.html#sec-the-four-most-common-dplyr-verbs",
    "href": "data-wrangling-1.html#sec-the-four-most-common-dplyr-verbs",
    "title": "4  Data wrangling I",
    "section": "\n4.4 The four most common dplyr verbs",
    "text": "4.4 The four most common dplyr verbs\nWe’ll use the four most common verbs in dplyr to examine the Palmer Penguins data (Section 3.4.1).\n\n4.4.1 Filter rows with filter()\n\nTo remind you, the penguins data frame has 344 rows (Section 3.4.1). Each row contains a set of observations contained in the columns for a single penguin from one of three species (Figure 3.6) living on one of three islands.\nSo if for example we wanted to filter the data frame for only the rows of penguins with a bills longer or equal to 50 mm, we would use the filter function as shown in Figure 4.3.\nThe function takes the penguins data frame object as the first argument. Either within the parentheses or via a pipe.\nThe second argument is the column (variable) we wish to filter on, in this case bill_length_mm and a logical expression (evaluates as TRUE or FALSE) that is the filter.\nHere the expression is greater or equal to 50 &gt;= 50.\nSo any row with a value in bill_length_mm greater or equal to 50 is TRUE and is retained and any row with a value less than 50 is FALSE and is discarded.\n\n\n\n\n\n\n\nFigure 4.3: The dplyr filter function. The filter function returns rows from your data frame that satisfy your filter expression as TRUE. Here it will return all Palmer Penguins with a bill longer or equal to 50 mm. Here it shows how filter will return all Palmer Penguins with a bill longer or equal to 50 mm. The function can either be used by providing the penguins data.frame as the first argument to the function or by passing the penguins data frame via a pipe.\n\n\n\n\nHere is the code, note that I’ve piped the output to the dplyr glimpse() function which prints a transposed summary of the filtered data frame contents to the console.\nInstead of a table of 344 penguins, we’ve returned a data frame with the 57 penguins (rows) that have bills equal or longer than 50 mm, but we still have 8 columns (variables) as filter() only acts on the rows.\n\npenguins |&gt; \n  filter(bill_length_mm &gt;= 50) |&gt; \n  glimpse()\n\nRows: 57\nColumns: 8\n$ species           &lt;fct&gt; Gentoo, Gentoo, Gentoo, Gentoo, Gentoo, Gentoo, Gent…\n$ island            &lt;fct&gt; Biscoe, Biscoe, Biscoe, Biscoe, Biscoe, Biscoe, Bisc…\n$ bill_length_mm    &lt;dbl&gt; 50.0, 50.0, 50.2, 50.0, 59.6, 50.5, 50.5, 50.1, 50.4…\n$ bill_depth_mm     &lt;dbl&gt; 16.3, 15.2, 14.3, 15.3, 17.0, 15.9, 15.9, 15.0, 15.3…\n$ flipper_length_mm &lt;int&gt; 230, 218, 218, 220, 230, 222, 225, 225, 224, 231, 22…\n$ body_mass_g       &lt;int&gt; 5700, 5700, 5700, 5550, 6050, 5550, 5400, 5000, 5550…\n$ sex               &lt;fct&gt; male, male, male, male, male, male, male, male, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2008, 2008, 2008, 2008…\n\n\nFiltering can be done using multiple columns and expressions. See the official filter documentation for more complex examples.\n\n4.4.2 Arranging rows with arrange()\n\nAnother row verb is arrange() which as the name suggests arranges the rows according to column values (Figure 4.4 ).\nHere I’ll pipe the penguins data frame to the base R head() function, which returns the first six rows by default. Again I am returning the output to the console.\nI’ve formatted the output slightly here to highlight flipper_length_mm in red, so it may look a bit different to your output. We can see that row four is one of the two rows with missing values (indicated by NA) that we first encountered as a warning when we plotted this data (Section 3.11).\n\npenguins |&gt; \n  head() \n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\nAdelie\nTorgersen\n391\n187\n181\n3750\nmale\n2007\n\n\nAdelie\nTorgersen\n395\n174\n186\n3800\nfemale\n2007\n\n\nAdelie\nTorgersen\n403\n180\n195\n3250\nfemale\n2007\n\n\nAdelie\nTorgersen\nNA\nNA\nNA\nNA\nNA\n2007\n\n\nAdelie\nTorgersen\n367\n193\n193\n3450\nfemale\n2007\n\n\nAdelie\nTorgersen\n393\n206\n190\n3650\nmale\n2007\n\n\n\n\n\n\nNext I add another line of code using arrange(flipper_length_mm) to sort the rows according to the values in this column. It defaults to ascending order.\n\npenguins |&gt; \n  arrange(flipper_length_mm) |&gt; \n  head()\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\nAdelie\nBiscoe\n379\n186\n172\n3150\nfemale\n2007\n\n\nAdelie\nBiscoe\n378\n183\n174\n3400\nfemale\n2007\n\n\nAdelie\nTorgersen\n402\n170\n176\n3450\nfemale\n2009\n\n\nAdelie\nDream\n395\n167\n178\n3250\nfemale\n2007\n\n\nAdelie\nDream\n372\n181\n178\n3900\nmale\n2007\n\n\nAdelie\nDream\n331\n161\n178\n2900\nfemale\n2008\n\n\n\n\n\n\nTo arrange for descending order, I need to use the desc() function in combination with arrange() like so:\n\npenguins |&gt; \n  arrange(desc(flipper_length_mm)) |&gt; \n  head()\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\nGentoo\nBiscoe\n543\n157\n231\n5650\nmale\n2008\n\n\nGentoo\nBiscoe\n500\n163\n230\n5700\nmale\n2007\n\n\nGentoo\nBiscoe\n596\n170\n230\n6050\nmale\n2007\n\n\nGentoo\nBiscoe\n498\n168\n230\n5700\nmale\n2008\n\n\nGentoo\nBiscoe\n486\n160\n230\n5800\nmale\n2008\n\n\nGentoo\nBiscoe\n521\n170\n230\n5550\nmale\n2009\n\n\n\n\n\n\nFurther guidance about arrange() from R4DS:\n\n“If you provide more than one column name, each additional column will be used to break ties in the values of preceding columns… Missing values are always sorted at the end.”\n\n\n\n\n\n\n\n\nFigure 4.4: The dplyr arrange function. The arrange function orders rows from your data frame according to column variables. Here it will order the Palmer Penguins data.frame according to their flipper length. The function can either be used by providing the penguins data.frame as the first argument to the function or by passing the penguins data.frame via a pipe.\n\n\n\n\n\n4.4.3 Selecting columns with select()\n\nOften your data contains variables you don’t need for the analysis you are performing, or you want to subset them to share with others. To select only the ones you need, or explore subsets of the variables, the select() verb enables you to keep only the columns of interest.\nFigure 4.5 shows the use of select() to choose only the island and year columns, with or without the pipe.\nSelecting the variables contained in the columns can be done in various ways. For example, by the column number, the variable name or by range. Check the help function ?select for more options.\n\n\n\n\n\n\n\nFigure 4.5: The dplyr select function. This function selects columns from your data frame. Here it will select the island and year columns from Palmer Penguins data.frame. The function can either be used by providing the penguins data.frame as the first argument to the function or by passing the penguins data.frame via a pipe.\n\n\n\n\nLet’s do this a couple of ways, first reminding ourselves of what the columns are using glimpse(). I’ll continue with the piped approach.\n\npenguins |&gt; \n  glimpse()\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nSo we can see the eight column names and that island is column 2 and year is column 8.\nLet’s select by name:\n\npenguins |&gt; \n  select(island, year) |&gt; \n  glimpse()\n\nRows: 344\nColumns: 2\n$ island &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ year   &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 200…\n\n\nBy column number:\n\npenguins |&gt; \n  select(2,8) |&gt; \n  glimpse()\n\nRows: 344\nColumns: 2\n$ island &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ year   &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 200…\n\n\nBy negative selection using the minus sign - to exclude the columns we don’t want:\n\npenguins |&gt; \n  select(-species,-bill_length_mm, -bill_depth_mm,\n         -flipper_length_mm,-body_mass_g, -sex) |&gt; \n  glimpse()\n\nRows: 344\nColumns: 2\n$ island &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ year   &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 200…\n\n\nSee the select documentation for other approaches for using select such as renaming columns, reordering the columns or picking variables with selection helper functions.\n\n4.4.4 Creating new columns with mutate()\n\nAnother common task is to create a new variable or variables, often from existing data within the data frame. For this we use the mutate() verb. It follows the same syntax as for filter(), arrange() and select() in that the first argument is the dataset, and the subsequent arguments are the new variables we wish to create (Figure 4.6).\n\n\n\n\n\n\n\nFigure 4.6: The dplyr mutate function. The mutate function creates new column variables in your data frame. Here mutate creates a new variable called body_mass_kg in the Palmer Penguins data.frame by dividing the values in the body_mass_g column by 1000 and storing the answer in new variable body_mass_kg. The function can either be used by providing the penguins data.frame as the first argument to the function or by passing the penguins data.frame via a pipe.\n\n\n\n\nHere I’ll use the piped syntax again and glimpse() on the output to create a new variable for penguin body mass in kilograms called body_mass_kg from the existing body mass in grams variable by dividing by 1,000 using mutate().\nI’m also going to use select() to select only the species, body_mass_g and new variable body_mass_kg and then head() to view the first six rows to make the output a bit easier to read.\n\npenguins |&gt; \n  mutate(body_mass_kg = body_mass_g/1000) |&gt; \n  select(species, body_mass_g, body_mass_kg) |&gt; \n  head()\n\n\n\n\n\n\n\nspecies\nisland\nbody_mass_g\nbody_mass_kg\n\n\n\nAdelie\nTorgersen\n3750\n3.75\n\n\nAdelie\nTorgersen\n3800\n3.80\n\n\nAdelie\nTorgersen\n3250\n3.25\n\n\nAdelie\nTorgersen\nNA\nNA\n\n\nAdelie\nTorgersen\n3450\n3.45\n\n\nAdelie\nTorgersen\n3650\n3.65",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data wrangling I</span>"
    ]
  },
  {
    "objectID": "data-wrangling-1.html#sec-creating-grouped-summaries",
    "href": "data-wrangling-1.html#sec-creating-grouped-summaries",
    "title": "4  Data wrangling I",
    "section": "\n4.5 Creating grouped summaries with dplyr\n",
    "text": "4.5 Creating grouped summaries with dplyr\n\nAnother powerful feature of dplyr is it’s ability to summarise the entire dataset in a single row.\n\npenguins |&gt; \n  summarise(mean_mass_g = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  mean_mass_g\n        &lt;dbl&gt;\n1       4202.\n\n\n\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(mean_mass_g = mean(body_mass_g, na.rm = TRUE), \n            n_penguins = n())\n\n# A tibble: 3 × 3\n  species   mean_mass_g n_penguins\n  &lt;fct&gt;           &lt;dbl&gt;      &lt;int&gt;\n1 Adelie          3701.        152\n2 Chinstrap       3733.         68\n3 Gentoo          5076.        124\n\n\n\n4.5.1 Using group_by() and summarise() together\nCalculating the average bill length and depth for each species\npipe the penguins dataset into the group_by() function, which groups the data by the species variable. - We then use the summarise() function to calculate the average bill length and depth for each species using mean(). - The na.rm = TRUE argument is used to remove any missing values before calculating the means.\n\n# Calculate the average bill length and depth for each species\npenguins |&gt;\n  group_by(species) |&gt;\n  summarise(\n    avg_bill_length = mean(bill_length_mm, na.rm = TRUE),\n    avg_bill_depth = mean(bill_depth_mm, na.rm = TRUE)\n  )\n\n# A tibble: 3 × 3\n  species   avg_bill_length avg_bill_depth\n  &lt;fct&gt;               &lt;dbl&gt;          &lt;dbl&gt;\n1 Adelie               38.8           18.3\n2 Chinstrap            48.8           18.4\n3 Gentoo               47.5           15.0\n\n\nCount the number of penguins by island and sex. We start with the penguins dataset and pipe it into the group_by() function to group the data by both island and sex variables. As before, we then use the summarise() function along with n() to count the number of penguins in each group.\n\n# Count the number of penguins by island and sex\npenguins |&gt;\n  group_by(island, sex) |&gt;\n  summarise(mean_mass_g = mean(body_mass_g,na.rm = TRUE), \n            n_penguins = n())\n\n# A tibble: 9 × 4\n# Groups:   island [3]\n  island    sex    mean_mass_g n_penguins\n  &lt;fct&gt;     &lt;fct&gt;        &lt;dbl&gt;      &lt;int&gt;\n1 Biscoe    female       4319.         80\n2 Biscoe    male         5105.         83\n3 Biscoe    &lt;NA&gt;         4588.          5\n4 Dream     female       3446.         61\n5 Dream     male         3987.         62\n6 Dream     &lt;NA&gt;         2975           1\n7 Torgersen female       3396.         24\n8 Torgersen male         4035.         23\n9 Torgersen &lt;NA&gt;         3681.          5",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data wrangling I</span>"
    ]
  },
  {
    "objectID": "data-wrangling-1.html#pivots",
    "href": "data-wrangling-1.html#pivots",
    "title": "4  Data wrangling I",
    "section": "\n4.6 Pivots",
    "text": "4.6 Pivots\nData can be untidy in different ways. One way might be that the values are in the variable names. Or perhaps the reverse is true and you’d like the values to be column names.\nReshaping a table is called pivoting. If one pivots a table that leads to increasing the number of rows one would use the tidyr package function pivot_longer() and if one pivots a table to increase the number of columns one would use pivot_wider() (Figure 4.7 and Figure 4.8).\n\n\n\n\n\n\n\nFigure 4.7: pivot\n\n\n\n\n\n\n\n\n\n\n\nFigure 4.8: pivot\n\n\n\n\n\n# Pivot the data longer\npenguins_long &lt;- penguins |&gt;\n  select(species,island,sex) |&gt; \n  pivot_longer(\n    cols = species:sex,\n    names_to = \"key\",\n    values_to = \"val\"\n  )\n\nglimpse(penguins_long)\n\nRows: 1,032\nColumns: 2\n$ key &lt;chr&gt; \"species\", \"island\", \"sex\", \"species\", \"island\", \"sex\", \"species\",…\n$ val &lt;fct&gt; Adelie, Torgersen, male, Adelie, Torgersen, female, Adelie, Torger…\n\n\n\n# Pivot the data wider\npenguins_wide &lt;- penguins_long |&gt;\n  pivot_wider(\n    names_from = \"key\",\n    values_from = \"val\"\n  )\n\nWarning: Values from `val` are not uniquely identified; output will contain list-cols.\n• Use `values_fn = list` to suppress this warning.\n• Use `values_fn = {summary_fun}` to summarise duplicates.\n• Use the following dplyr code to identify duplicates.\n  {data} %&gt;%\n  dplyr::group_by(key) %&gt;%\n  dplyr::summarise(n = dplyr::n(), .groups = \"drop\") %&gt;%\n  dplyr::filter(n &gt; 1L)\n\nglimpse(penguins_wide)\n\nRows: 1\nColumns: 3\n$ species &lt;list&gt; &lt;Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island  &lt;list&gt; &lt;Torgersen, Torgersen, Torgersen, Torgersen, Torgersen, Torge…\n$ sex     &lt;list&gt; &lt;male, female, female, NA, female, male, female, male, NA, NA…",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data wrangling I</span>"
    ]
  },
  {
    "objectID": "data-wrangling-2.html",
    "href": "data-wrangling-2.html",
    "title": "5  Data wrangling II",
    "section": "",
    "text": "5.1 Joins\nR4DS joins gives some detailed examples of joining tables, but here we’ll look at some simpler examples to try build our mental model.\nThere are two types of join we often encounter:",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data wrangling II</span>"
    ]
  },
  {
    "objectID": "data-wrangling-2.html#joins",
    "href": "data-wrangling-2.html#joins",
    "title": "5  Data wrangling II",
    "section": "",
    "text": "Joins that create new variables in one table by matching observations in another: these are mutating joins as per tidyverse verb mutate Section 4.4.4.\nJoins that filter the observations from one table against another, as per tidyverse verb filter Section 4.4.1.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data wrangling II</span>"
    ]
  },
  {
    "objectID": "data-wrangling-2.html#mutating-joins",
    "href": "data-wrangling-2.html#mutating-joins",
    "title": "5  Data wrangling II",
    "section": "\n5.2 Mutating joins",
    "text": "5.2 Mutating joins\n\n# Create unique id for each penguin\nnumbered_penguins &lt;- penguins |&gt; \n  mutate(penguin_number = row_number())\n\n# Split the dataset into two tables\npenguins_physical &lt;- numbered_penguins |&gt;\n  select(penguin_number,species, island, bill_length_mm, \n         bill_depth_mm, flipper_length_mm, body_mass_g)\n\npenguins_info &lt;- numbered_penguins |&gt;\n  select(penguin_number,species, island, year, sex)\n\n\n# Join the two tables back together as a left join\npenguins_joined &lt;- penguins_physical |&gt;\n  left_join(penguins_info)\n\nJoining with `by = join_by(penguin_number, species, island)`\n\n# Print the joined dataset\nglimpse(penguins_joined)\n\nRows: 344\nColumns: 9\n$ penguin_number    &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data wrangling II</span>"
    ]
  },
  {
    "objectID": "data-wrangling-2.html#filtering-join",
    "href": "data-wrangling-2.html#filtering-join",
    "title": "5  Data wrangling II",
    "section": "\n5.3 Filtering join",
    "text": "5.3 Filtering join\n\n# Create \npenguins_info_filt &lt;- penguins_info |&gt;\n  filter(year == 2008)\n\n# Perform a filtering join\npenguins_filtered &lt;- penguins_physical |&gt;\n  semi_join(penguins_info_filt)\n\nJoining with `by = join_by(penguin_number, species, island)`\n\n# Print the filtered dataset\nglimpse(penguins_filtered)\n\nRows: 114\nColumns: 7\n$ penguin_number    &lt;int&gt; 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, …\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Biscoe, Biscoe, Biscoe, Biscoe, Biscoe, Biscoe, Bisc…\n$ bill_length_mm    &lt;dbl&gt; 39.6, 40.1, 35.0, 42.0, 34.5, 41.4, 39.0, 40.6, 36.5…\n$ bill_depth_mm     &lt;dbl&gt; 17.7, 18.9, 17.9, 19.5, 18.1, 18.6, 17.5, 18.8, 16.6…\n$ flipper_length_mm &lt;int&gt; 186, 188, 190, 200, 187, 191, 186, 193, 181, 194, 18…\n$ body_mass_g       &lt;int&gt; 3500, 4300, 3450, 4050, 2900, 3700, 3550, 3800, 2850…",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data wrangling II</span>"
    ]
  },
  {
    "objectID": "data-wrangling-2.html#strings",
    "href": "data-wrangling-2.html#strings",
    "title": "5  Data wrangling II",
    "section": "\n5.4 Strings",
    "text": "5.4 Strings\n\ncat_names &lt;- c(\"Whiskers\", \"Fluffy\", \"Mittens\", \"Socks\", \"Tiger\", \"Smokey\", \"Gizmo\", \"Oreo\", \"Luna\", \"Oliver\", \"Leo\", \"Milo\", \"Charlie\", \"Simba\", \"Nala\", \"Felix\", \"Garfield\", \"Tigger\", \"Chloe\", \"Bella\")\n\nwords &lt;- c(\n  \"abounding\",\n  \"astounding\",\n  \"confounding\",\n  \"resounding\",\n  \"surrounding\",\n  \"grounding\",\n  \"founding\",\n  \"pounding\",\n  \"rounding\",\n  \"sounding\",\n  \"bounding\",\n  \"hounding\",\n  \"mounding\",\n  \"wounding\",\n  \"compounding\",\n  \"expounding\",\n  \"propounding\",\n  \"rebounding\",\n  \"unbounding\",\n  \"floundering\"\n)\n\nstr_view(words,\"ding\")\n\n [1] │ aboun&lt;ding&gt;\n [2] │ astoun&lt;ding&gt;\n [3] │ confoun&lt;ding&gt;\n [4] │ resoun&lt;ding&gt;\n [5] │ surroun&lt;ding&gt;\n [6] │ groun&lt;ding&gt;\n [7] │ foun&lt;ding&gt;\n [8] │ poun&lt;ding&gt;\n [9] │ roun&lt;ding&gt;\n[10] │ soun&lt;ding&gt;\n[11] │ boun&lt;ding&gt;\n[12] │ houn&lt;ding&gt;\n[13] │ moun&lt;ding&gt;\n[14] │ woun&lt;ding&gt;\n[15] │ compoun&lt;ding&gt;\n[16] │ expoun&lt;ding&gt;\n[17] │ propoun&lt;ding&gt;\n[18] │ reboun&lt;ding&gt;\n[19] │ unboun&lt;ding&gt;\n\nstr_view(words,\"bou|rr|ding\")\n\n [1] │ a&lt;bou&gt;n&lt;ding&gt;\n [2] │ astoun&lt;ding&gt;\n [3] │ confoun&lt;ding&gt;\n [4] │ resoun&lt;ding&gt;\n [5] │ su&lt;rr&gt;oun&lt;ding&gt;\n [6] │ groun&lt;ding&gt;\n [7] │ foun&lt;ding&gt;\n [8] │ poun&lt;ding&gt;\n [9] │ roun&lt;ding&gt;\n[10] │ soun&lt;ding&gt;\n[11] │ &lt;bou&gt;n&lt;ding&gt;\n[12] │ houn&lt;ding&gt;\n[13] │ moun&lt;ding&gt;\n[14] │ woun&lt;ding&gt;\n[15] │ compoun&lt;ding&gt;\n[16] │ expoun&lt;ding&gt;\n[17] │ propoun&lt;ding&gt;\n[18] │ re&lt;bou&gt;n&lt;ding&gt;\n[19] │ un&lt;bou&gt;n&lt;ding&gt;\n\nstr_detect(cat_names,\"[isk]\") # Find names with i,s or k\n\n [1]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE  TRUE\n[13]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE\n\nstr_count(cat_names,\"[isk]\")\n\n [1] 4 0 2 2 1 1 1 0 0 1 0 1 1 1 0 1 1 1 0 0\n\nstr_replace(cat_names,\"[isk]\",\"-\")\n\n [1] \"Wh-skers\" \"Fluffy\"   \"M-ttens\"  \"Soc-s\"    \"T-ger\"    \"Smo-ey\"  \n [7] \"G-zmo\"    \"Oreo\"     \"Luna\"     \"Ol-ver\"   \"Leo\"      \"M-lo\"    \n[13] \"Charl-e\"  \"S-mba\"    \"Nala\"     \"Fel-x\"    \"Garf-eld\" \"T-gger\"  \n[19] \"Chloe\"    \"Bella\"   \n\nstr_replace_all(cat_names,\"[isk]\",\"-\")\n\n [1] \"Wh---er-\" \"Fluffy\"   \"M-tten-\"  \"Soc--\"    \"T-ger\"    \"Smo-ey\"  \n [7] \"G-zmo\"    \"Oreo\"     \"Luna\"     \"Ol-ver\"   \"Leo\"      \"M-lo\"    \n[13] \"Charl-e\"  \"S-mba\"    \"Nala\"     \"Fel-x\"    \"Garf-eld\" \"T-gger\"  \n[19] \"Chloe\"    \"Bella\"   \n\n\n\ncat_tibble &lt;- tibble(\n  cat_id = str_c(\"&lt;\", cat_names, \"&gt;\",\n                 sample(c(\"-M_\",\"-F_\"), \n                        size = length(cat_names), \n                      replace = TRUE),  \n               sample(3:11, size = length(cat_names), \n                      replace = TRUE))\n)\n\ncat_tibble\n\n# A tibble: 20 × 1\n   cat_id         \n   &lt;chr&gt;          \n 1 &lt;Whiskers&gt;-M_9 \n 2 &lt;Fluffy&gt;-F_5   \n 3 &lt;Mittens&gt;-M_9  \n 4 &lt;Socks&gt;-F_11   \n 5 &lt;Tiger&gt;-M_4    \n 6 &lt;Smokey&gt;-M_9   \n 7 &lt;Gizmo&gt;-F_8    \n 8 &lt;Oreo&gt;-F_7     \n 9 &lt;Luna&gt;-M_11    \n10 &lt;Oliver&gt;-F_7   \n11 &lt;Leo&gt;-M_3      \n12 &lt;Milo&gt;-M_3     \n13 &lt;Charlie&gt;-F_10 \n14 &lt;Simba&gt;-M_4    \n15 &lt;Nala&gt;-M_3     \n16 &lt;Felix&gt;-F_7    \n17 &lt;Garfield&gt;-M_10\n18 &lt;Tigger&gt;-M_9   \n19 &lt;Chloe&gt;-M_9    \n20 &lt;Bella&gt;-M_10   \n\ncat_tibble |&gt; \n  separate_wider_regex(\n    cat_id,\n    patterns = c(\"&lt;\", \n      name = \"[A-Za-z]+\", \"&gt;-\", \n      sex = \".\",\"_\",\n      age = \"[0-9]+\")\n  )\n\n# A tibble: 20 × 3\n   name     sex   age  \n   &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;\n 1 Whiskers M     9    \n 2 Fluffy   F     5    \n 3 Mittens  M     9    \n 4 Socks    F     11   \n 5 Tiger    M     4    \n 6 Smokey   M     9    \n 7 Gizmo    F     8    \n 8 Oreo     F     7    \n 9 Luna     M     11   \n10 Oliver   F     7    \n11 Leo      M     3    \n12 Milo     M     3    \n13 Charlie  F     10   \n14 Simba    M     4    \n15 Nala     M     3    \n16 Felix    F     7    \n17 Garfield M     10   \n18 Tigger   M     9    \n19 Chloe    M     9    \n20 Bella    M     10",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Data wrangling II</span>"
    ]
  },
  {
    "objectID": "wrangling-bibliometrics-data.html",
    "href": "wrangling-bibliometrics-data.html",
    "title": "6  Wrangling bibliometrics data",
    "section": "",
    "text": "6.1 Describing the problem\nI’ll attempt to describe the problem as I understand it, and then break it down into parts that correspond with Chapter 3 , Chapter 4 and Chapter 5.\nHere’s an excerpt from an email Kate sent me on 2023-11-21:\nFrom what I can see, the overarching problem is this:\nI’m not going to be able to cover every step, For some of these steps we need to create our own tables of data e.g a table of department codes or open access codes, as well as download pre-existing data.\nI downloaded some data as a csv file from Scopus Advanced Search to generate a report for 31 days prior to 2024-03-13 using the following query string:\nAF-ID(\"University of Southampton\" 60025225) AND PUBYEAR &gt; 2017 AND PUBYEAR &lt; 2025 AND ( LIMIT-TO ( DOCTYPE,\"ar\" ) OR LIMIT-TO ( DOCTYPE,\"re\" ) OR LIMIT-TO ( DOCTYPE,\"cp\" ) OR LIMIT-TO ( DOCTYPE,\"ed\" ) OR LIMIT-TO ( DOCTYPE,\"le\" ) ) AND RECENT(31)\nI’ll read it in directly from the repository for this book, and use glimpse() to look at the contents. It has 483 rows and 20 columns, each row comprises a set of observations for a single publication as per Figure 3.9, the title of each publication is in the Title column.\n# Load the Pure csv file\npure_dat &lt;- read_csv(\"https://github.com/ab604/library-r/raw/main/data/pure-2024-03-26.csv\")\n# Load the scopus csv file\nscopus_dat &lt;- read_csv(\"https://github.com/ab604/library-r/raw/main/data/scopus-2024-03-13.csv\")\n# Load the Web of science tsv file\nwos_dat &lt;- read_tsv(\"https://github.com/ab604/library-r/raw/main/data/web-of-science-2024-03-26.tsv\")\n\n# Look at the contents\nglimpse(pure_dat)\n\nRows: 5,186\nColumns: 21\n$ `Electronic version(s) of this work &gt; DOI (Digital Object Identifier)-0` &lt;chr&gt; …\n$ `Additional source IDs-1`                                                &lt;chr&gt; …\n$ `UUID-2`                                                                 &lt;chr&gt; …\n$ `ID-3`                                                                   &lt;dbl&gt; …\n$ `Managing organisational unit-4`                                         &lt;chr&gt; …\n$ `Title of the contribution in original language-5`                       &lt;chr&gt; …\n$ `Subtitle of the contribution in original language-6`                    &lt;chr&gt; …\n$ `Publication statuses and dates &gt; E-pub ahead of print-7`                &lt;chr&gt; …\n$ `Publication statuses and dates &gt; Accepted/In press-8`                   &lt;chr&gt; …\n$ `Workflow &gt; Step-9`                                                      &lt;chr&gt; …\n$ `Electronic version(s) of this work &gt; Document version-10`               &lt;chr&gt; …\n$ `Electronic version(s) of this work &gt; Licence to document-11`            &lt;chr&gt; …\n$ `Managing organisational unit-12`                                        &lt;chr&gt; …\n$ `Open Access status-13`                                                  &lt;chr&gt; …\n$ `REF Open Access Compliance Status-14`                                   &lt;chr&gt; …\n$ `REF2021 exception-15`                                                   &lt;chr&gt; …\n$ `Current publication status &gt; Date-16`                                   &lt;dbl&gt; …\n$ `Journal &gt; Journal-17`                                                   &lt;chr&gt; …\n$ `Event-18`                                                               &lt;chr&gt; …\n$ `Title of the host publication in original language-19`                  &lt;chr&gt; …\n$ `Type-20`                                                                &lt;chr&gt; …\n\nglimpse(scopus_dat)\n\nRows: 483\nColumns: 20\n$ Authors                     &lt;chr&gt; \"Liu Z.; Ettabib M.A.; Bowden B.M.; Bartle…\n$ `Author full names`         &lt;chr&gt; \"Liu, Zhen (57220604023); Ettabib, Mohamed…\n$ `Author(s) ID`              &lt;chr&gt; \"57220604023; 36662229200; 57225044665; 15…\n$ Title                       &lt;chr&gt; \"Multiframe-based non-local means denoisin…\n$ Year                        &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, …\n$ `Source title`              &lt;chr&gt; \"Spectrochimica Acta - Part A: Molecular a…\n$ DOI                         &lt;chr&gt; \"10.1016/j.saa.2024.123931\", \"10.1113/JP28…\n$ Link                        &lt;chr&gt; \"https://www.scopus.com/inward/record.uri?…\n$ Affiliations                &lt;chr&gt; \"Zepler Institute for Photonics and Nanoel…\n$ `Authors with affiliations` &lt;chr&gt; \"Liu Z., Zepler Institute for Photonics an…\n$ `Funding Details`           &lt;chr&gt; \"Defence Science and Technology Laboratory…\n$ `Correspondence Address`    &lt;chr&gt; \"Z. Liu; Zepler Institute for Photonics an…\n$ Publisher                   &lt;chr&gt; \"Elsevier B.V.\", \"John Wiley and Sons Inc\"…\n$ ISSN                        &lt;chr&gt; \"13861425\", \"00223751\", \"00298018\", \"00489…\n$ ISBN                        &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ CODEN                       &lt;chr&gt; \"SAMCA\", \"JPHYA\", NA, \"STEVA\", NA, NA, \"EN…\n$ `Document Type`             &lt;chr&gt; \"Article\", \"Article\", \"Article\", \"Article\"…\n$ `Open Access`               &lt;chr&gt; NA, \"All Open Access; Hybrid Gold Open Acc…\n$ Source                      &lt;chr&gt; \"Scopus\", \"Scopus\", \"Scopus\", \"Scopus\", \"S…\n$ EID                         &lt;chr&gt; \"2-s2.0-85183956855\", \"2-s2.0-85186478720\"…\n\nglimpse(wos_dat)\n\nRows: 50\nColumns: 71\n$ PT &lt;chr&gt; \"J\", \"J\", \"J\", \"J\", \"J\", \"J\", \"J\", \"J\", \"J\", \"J\", \"J\", \"J\", \"J\", \"J…\n$ AU &lt;chr&gt; \"Saunders, B\", \"Messiou, K; de los Reyes, J; Potnis, C; Dong, P; Rw…\n$ BA &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ BE &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ GP &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ AF &lt;chr&gt; \"Saunders, Ben\", \"Messiou, Kyriaki; de los Reyes, Jay; Potnis, Chin…\n$ BF &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ CA &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ TI &lt;chr&gt; \"Fetuses are not adult humans: a response to Miller on abortion\", \"…\n$ SO &lt;chr&gt; \"JOURNAL OF MEDICAL ETHICS\", \"INTERNATIONAL JOURNAL OF INCLUSIVE ED…\n$ SE &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ BS &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ LA &lt;chr&gt; \"English\", \"English\", \"English\", \"English\", \"English\", \"English\", \"…\n$ DT &lt;chr&gt; \"Editorial Material; Early Access\", \"Article; Early Access\", \"Artic…\n$ CT &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ CY &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ CL &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ SP &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ HO &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ DE &lt;chr&gt; \"Abortion - Induced; Ethics; Fetus; Moral Status; Personhood\", \"Stu…\n$ ID &lt;chr&gt; NA, \"EDUCATION; POWER\", \"ACHIEVEMENT INEQUALITY; EDUCATIONAL-INEQUA…\n$ AB &lt;chr&gt; \"Miller has recently argued that fetuses have the same inherent val…\n$ C1 &lt;chr&gt; \"[Saunders, Ben] Univ Southampton, Polit & IR, Southampton, England…\n$ C3 &lt;chr&gt; \"University of Southampton\", \"University of Southampton\", \"Universi…\n$ RP &lt;chr&gt; \"Saunders, B (corresponding author), Univ Southampton, Polit & IR, …\n$ EM &lt;chr&gt; \"b.m.saunders@soton.ac.uk\", \"k.messiou@soton.ac.uk\", \"n.pensiero@so…\n$ RI &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, \"; gardes, frederic/C-1619-2013; Gow, P…\n$ OI &lt;chr&gt; \"Saunders, Ben/0000-0002-5147-6397\", \"Messiou, Kyriaki/0000-0003-34…\n$ FU &lt;chr&gt; NA, \"UKRI10.13039/100014013\", NA, NA, NA, \"Engineering and Physical…\n$ FP &lt;chr&gt; NA, \"UKRI10.13039/100014013\", NA, NA, NA, \"Engineering and Physical…\n$ FX &lt;chr&gt; NA, \"We would like to thank all children and teachers who took part…\n$ CR &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ NR &lt;dbl&gt; 7, 50, 73, 82, 3, 60, 35, 11, 0, 47, 102, 6, 101, 2, 15, 76, 40, 61…\n$ TC &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0…\n$ Z9 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0…\n$ U1 &lt;dbl&gt; 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 1, 0, 0…\n$ U2 &lt;dbl&gt; 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 1, 0, 0…\n$ PU &lt;chr&gt; \"BMJ PUBLISHING GROUP\", \"ROUTLEDGE JOURNALS, TAYLOR & FRANCIS LTD\",…\n$ PI &lt;chr&gt; \"LONDON\", \"ABINGDON\", \"ABINGDON\", \"LONDON\", \"HOBOKEN\", \"WASHINGTON\"…\n$ PA &lt;chr&gt; \"BRITISH MED ASSOC HOUSE, TAVISTOCK SQUARE, LONDON WC1H 9JR, ENGLAN…\n$ SN &lt;chr&gt; \"0306-6800\", \"1360-3116\", \"1747-7778\", \"1468-215X\", \"0007-1315\", \"2…\n$ EI &lt;chr&gt; \"1473-4257\", \"1464-5173\", \"1747-7786\", \"1473-4265\", \"1468-4446\", NA…\n$ BN &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ J9 &lt;chr&gt; \"J MED ETHICS\", \"INT J INCLUSIVE EDUC\", \"J SIMUL\", \"MED HUMANIT\", \"…\n$ JI &lt;chr&gt; \"J. Med. Ethics\", \"Int. J. Incl. Educ.\", \"J. Simul.\", \"Med. Humanit…\n$ PD &lt;chr&gt; \"2024 FEB 23\", \"2024 FEB 20\", \"2024 MAR 10\", \"2024 FEB 15\", \"2024 F…\n$ PY &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2…\n$ VL &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, 60, NA, NA, NA, 12, 6, NA, 8, NA, NA, 6…\n$ IS &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, 5, NA, NA, 2, 1, NA, NA, 3, NA, NA, 3, …\n$ PN &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ SU &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ SI &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ MA &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ BP &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ EP &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ AR &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, \"e13138\", NA, NA, \"90\", \"010201\", \"1245…\n$ DI &lt;chr&gt; \"10.1136/jme-2024-109854\", \"10.1080/13603116.2024.2317729\", \"10.108…\n$ DL &lt;chr&gt; \"http://dx.doi.org/10.1136/jme-2024-109854\", \"http://dx.doi.org/10.…\n$ D2 &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ EA &lt;chr&gt; \"FEB 2024\", \"FEB 2024\", \"MAR 2024\", \"FEB 2024\", \"FEB 2024\", \"MAR 20…\n$ PG &lt;dbl&gt; 2, 15, 15, 10, 3, 10, 25, 3, 2, 19, 52, 2, 13, 1, 4, 21, 13, 22, 10…\n$ WC &lt;chr&gt; \"Ethics; Medical Ethics; Social Issues; Social Sciences, Biomedical…\n$ WE &lt;chr&gt; \"Science Citation Index Expanded (SCI-EXPANDED); Social Science Cit…\n$ SC &lt;chr&gt; \"Social Sciences - Other Topics; Medical Ethics; Social Issues; Bio…\n$ GA &lt;chr&gt; \"JS7M6\", \"JA7K3\", \"LN5N2\", \"ID4Y4\", \"HW8F9\", \"KP6M7\", \"KP2U6\", \"KJ8…\n$ PM &lt;dbl&gt; 38395622, NA, NA, 38360797, NA, NA, NA, NA, NA, NA, NA, NA, NA, 384…\n$ OA &lt;chr&gt; NA, \"hybrid\", \"hybrid\", NA, NA, \"hybrid\", \"hybrid, Green Submitted\"…\n$ HC &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ HP &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ DA &lt;date&gt; 2024-03-26, 2024-03-26, 2024-03-26, 2024-03-26, 2024-03-26, 2024-0…\n$ UT &lt;chr&gt; \"WOS:001175218400001\", \"WOS:001170495400001\", \"WOS:001187496600001\"…\npure_lipid &lt;- pure_dat |&gt; \n  filter(`Title of the contribution in original language-5` == \"Lipid droplets in steatotic liver disease\") \n\n\nwos_lipid &lt;- wos_dat |&gt; \n  filter(TI == \"Lipid droplets in steatotic liver disease\")\n\nscopus_lipid &lt;- scopus_dat |&gt; \n  filter(Title == \"Lipid droplets in steatotic liver disease\")\n\nlipid_join &lt;- pure_lipid |&gt; \n  left_join(wos_dat, by = c(`Title of the contribution in original language-5` = \"TI\")) |&gt; \n  left_join(scopus_dat, by = c(`Title of the contribution in original language-5` = \"Title\"))\n\nglimpse(lipid_join)\n\nRows: 1\nColumns: 110\n$ `Electronic version(s) of this work &gt; DOI (Digital Object Identifier)-0` &lt;chr&gt; …\n$ `Additional source IDs-1`                                                &lt;chr&gt; …\n$ `UUID-2`                                                                 &lt;chr&gt; …\n$ `ID-3`                                                                   &lt;dbl&gt; …\n$ `Managing organisational unit-4`                                         &lt;chr&gt; …\n$ `Title of the contribution in original language-5`                       &lt;chr&gt; …\n$ `Subtitle of the contribution in original language-6`                    &lt;chr&gt; …\n$ `Publication statuses and dates &gt; E-pub ahead of print-7`                &lt;chr&gt; …\n$ `Publication statuses and dates &gt; Accepted/In press-8`                   &lt;chr&gt; …\n$ `Workflow &gt; Step-9`                                                      &lt;chr&gt; …\n$ `Electronic version(s) of this work &gt; Document version-10`               &lt;chr&gt; …\n$ `Electronic version(s) of this work &gt; Licence to document-11`            &lt;chr&gt; …\n$ `Managing organisational unit-12`                                        &lt;chr&gt; …\n$ `Open Access status-13`                                                  &lt;chr&gt; …\n$ `REF Open Access Compliance Status-14`                                   &lt;chr&gt; …\n$ `REF2021 exception-15`                                                   &lt;chr&gt; …\n$ `Current publication status &gt; Date-16`                                   &lt;dbl&gt; …\n$ `Journal &gt; Journal-17`                                                   &lt;chr&gt; …\n$ `Event-18`                                                               &lt;chr&gt; …\n$ `Title of the host publication in original language-19`                  &lt;chr&gt; …\n$ `Type-20`                                                                &lt;chr&gt; …\n$ PT                                                                       &lt;chr&gt; …\n$ AU                                                                       &lt;chr&gt; …\n$ BA                                                                       &lt;lgl&gt; …\n$ BE                                                                       &lt;lgl&gt; …\n$ GP                                                                       &lt;lgl&gt; …\n$ AF                                                                       &lt;chr&gt; …\n$ BF                                                                       &lt;lgl&gt; …\n$ CA                                                                       &lt;lgl&gt; …\n$ SO                                                                       &lt;chr&gt; …\n$ SE                                                                       &lt;lgl&gt; …\n$ BS                                                                       &lt;lgl&gt; …\n$ LA                                                                       &lt;chr&gt; …\n$ DT                                                                       &lt;chr&gt; …\n$ CT                                                                       &lt;lgl&gt; …\n$ CY                                                                       &lt;lgl&gt; …\n$ CL                                                                       &lt;lgl&gt; …\n$ SP                                                                       &lt;lgl&gt; …\n$ HO                                                                       &lt;lgl&gt; …\n$ DE                                                                       &lt;chr&gt; …\n$ ID                                                                       &lt;chr&gt; …\n$ AB                                                                       &lt;chr&gt; …\n$ C1                                                                       &lt;chr&gt; …\n$ C3                                                                       &lt;chr&gt; …\n$ RP                                                                       &lt;chr&gt; …\n$ EM                                                                       &lt;chr&gt; …\n$ RI                                                                       &lt;chr&gt; …\n$ OI                                                                       &lt;chr&gt; …\n$ FU                                                                       &lt;chr&gt; …\n$ FP                                                                       &lt;chr&gt; …\n$ FX                                                                       &lt;chr&gt; …\n$ CR                                                                       &lt;lgl&gt; …\n$ NR                                                                       &lt;dbl&gt; …\n$ TC                                                                       &lt;dbl&gt; …\n$ Z9                                                                       &lt;dbl&gt; …\n$ U1                                                                       &lt;dbl&gt; …\n$ U2                                                                       &lt;dbl&gt; …\n$ PU                                                                       &lt;chr&gt; …\n$ PI                                                                       &lt;chr&gt; …\n$ PA                                                                       &lt;chr&gt; …\n$ SN                                                                       &lt;chr&gt; …\n$ EI                                                                       &lt;chr&gt; …\n$ BN                                                                       &lt;lgl&gt; …\n$ J9                                                                       &lt;chr&gt; …\n$ JI                                                                       &lt;chr&gt; …\n$ PD                                                                       &lt;chr&gt; …\n$ PY                                                                       &lt;dbl&gt; …\n$ VL                                                                       &lt;dbl&gt; …\n$ IS                                                                       &lt;dbl&gt; …\n$ PN                                                                       &lt;lgl&gt; …\n$ SU                                                                       &lt;lgl&gt; …\n$ SI                                                                       &lt;chr&gt; …\n$ MA                                                                       &lt;lgl&gt; …\n$ BP                                                                       &lt;dbl&gt; …\n$ EP                                                                       &lt;dbl&gt; …\n$ AR                                                                       &lt;chr&gt; …\n$ DI                                                                       &lt;chr&gt; …\n$ DL                                                                       &lt;chr&gt; …\n$ D2                                                                       &lt;lgl&gt; …\n$ EA                                                                       &lt;chr&gt; …\n$ PG                                                                       &lt;dbl&gt; …\n$ WC                                                                       &lt;chr&gt; …\n$ WE                                                                       &lt;chr&gt; …\n$ SC                                                                       &lt;chr&gt; …\n$ GA                                                                       &lt;chr&gt; …\n$ PM                                                                       &lt;dbl&gt; …\n$ OA                                                                       &lt;chr&gt; …\n$ HC                                                                       &lt;lgl&gt; …\n$ HP                                                                       &lt;lgl&gt; …\n$ DA                                                                       &lt;date&gt; …\n$ UT                                                                       &lt;chr&gt; …\n$ Authors                                                                  &lt;chr&gt; …\n$ `Author full names`                                                      &lt;chr&gt; …\n$ `Author(s) ID`                                                           &lt;chr&gt; …\n$ Year                                                                     &lt;dbl&gt; …\n$ `Source title`                                                           &lt;chr&gt; …\n$ DOI                                                                      &lt;chr&gt; …\n$ Link                                                                     &lt;chr&gt; …\n$ Affiliations                                                             &lt;chr&gt; …\n$ `Authors with affiliations`                                              &lt;chr&gt; …\n$ `Funding Details`                                                        &lt;chr&gt; …\n$ `Correspondence Address`                                                 &lt;chr&gt; …\n$ Publisher                                                                &lt;chr&gt; …\n$ ISSN                                                                     &lt;chr&gt; …\n$ ISBN                                                                     &lt;chr&gt; …\n$ CODEN                                                                    &lt;chr&gt; …\n$ `Document Type`                                                          &lt;chr&gt; …\n$ `Open Access`                                                            &lt;chr&gt; …\n$ Source                                                                   &lt;chr&gt; …\n$ EID                                                                      &lt;chr&gt; …\nwos_mut &lt;- wos_dat |&gt; \n  mutate(department = str_extract(C1,\"(?&lt;=Southampton Univ,|Univ Southampton,|Univ Hosp Southampton NHS Fdn Trust,)(.*?)(?=, )\"))\n\nwos_mut |&gt; \n  select(C1, department) |&gt; \n  view()\nSo let’s assume the question here is:\nThe departments are in the Affiliations column. Using two more dplyr verbs, slice() and pull(), let’s look at the first four values (Listing 6.1).\nThis yields a character vector with four values and I can immediately see that Affiliations does contain not a single tidy value in each cell, it’s a messy value with multiple values separated by semi-colons.\nListing 6.1: Slice and pull the first four Affiliation values\n\nscopus_dat |&gt;         \n  slice(1:4) |&gt;       \n  pull(Affiliations)  \n\n\n\n\n[1] \"Zepler Institute for Photonics and Nanoelectronics, University of Southampton, Southampton, SO17 1BJ, United Kingdom; School of Chemistry, University of Southampton, Southampton, SO17 1BJ, United Kingdom\"                                                                                                                                                                                                                               \n[2] \"THERMOSENSELAB, Skin Sensing Research Group, School of Health Sciences, The University of Southampton, Southampton, United Kingdom\"                                                                                                                                                                                                                                                                                                        \n[3] \"Faculty of Engineering and Physical Sciences, University of Southampton, Southampton, SO16 7QF, United Kingdom; Data-Centric Engineering, The Alan Turing Institute, London, NW1 2DB, United Kingdom\"                                                                                                                                                                                                                                      \n[4] \"School of Ocean and Earth Sciences, National Oceanography Centre Southampton, University of Southampton, Southampton, SO14 3ZH, United Kingdom; Université Paris-Saclay, INRAE, AgroParisTech, UMR ECOSYS, Palaiseau, 91120, France; Jacobs, Bristol, BS2 0ZX, United Kingdom; School of Science, University of Waikato, Tauranga, 3110, New Zealand; Environmental Research Institute, University of Waikato, Hamilton, 3240, New Zealand\"\nTo be tidy, each semi-colon separated value should be in their own column. So we need to tidy the data (Section 3.7, Figure 3.9).",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Wrangling bibliometrics data</span>"
    ]
  },
  {
    "objectID": "wrangling-bibliometrics-data.html#describing-the-problem",
    "href": "wrangling-bibliometrics-data.html#describing-the-problem",
    "title": "6  Wrangling bibliometrics data",
    "section": "",
    "text": "[A spreadsheet] is produced from a fortnightly check… for REF and Funder Compliance… the Export Control Team periodically asks us for information about particular staff/institutions/countries and…trying to search in the Affiliations can be very time consuming…\n\n\n\n\n\n\n\n\n\nThere are three data sources: Scopus, Web of Science and Pure, from which tables about publications are regularly downloaded.\n\nAll three tables contain DOIs for the publications, but only Scopus has the UoS department affiliations, and Pure contains the Open Access compliance information\n\nThe data contained in these three tables needs to be joined, and then joined to other data.\nThe final output is a table indicating the open access status, funding body compliance status and University department affiliation for each publication.\n\n\n\n\n\n\n\n\n\n\n\n\n\n“Which University of Southampton Department(s) are affiliated with each publication?”\n\n\n\n\n\n\n\n\nNote how I’ve used an integer vector 1:4 as the argument to slice() to indicate I want rows 1 to 4, and then the column variable of interest as the argument for pull() to pull out the values for the Affiliations in rows 1 to 4.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Wrangling bibliometrics data</span>"
    ]
  },
  {
    "objectID": "wrangling-bibliometrics-data.html#tidying-the-scopus-data",
    "href": "wrangling-bibliometrics-data.html#tidying-the-scopus-data",
    "title": "6  Wrangling bibliometrics data",
    "section": "\n6.2 Tidying the Scopus data",
    "text": "6.2 Tidying the Scopus data\nLet’s break the problem down:\n\nFirst let’s separate the multiple affiliations that are in a single column into multiple columns, one for each affiliation. This is in keeping with tidy rule that each value should have it’s own cell.\n\nWe can use tidyr package function separate_wider_delim().\nseparate_wider_delim() takes three necessary arguments, and has several other optional arguments. The necessary ones are a data frame, here that’s scopus_dat. cols the column(s) we are separating, here that’s Affiliations and delim is a string we using as a delimiter to split the values on which as we saw is going to be ;.\nAs this is going to create new column variables, these need names too and here I provide the string for underscore \"_\" to names_sep and each new variable will have an underscore and numerical suffix called Affiliations_1, Affiliations_2 etc.\nThe final argument we’ll use is too_few and we’ll use \"align_start\" as the value. This means that our departments will first be put in Affiliations_1 and adds missing values columns NA in any columns where a row runs out of departments. This ensures all rows have the same number of columns regardless of how many values were in the original Affiliations column. The total number of Affiliation columns will be determined by the article with the most Affiliation values.\nHence the table will get wider as new columns are created!\nI’ll assign the output to a new data frame object scopus_dat_wide.\n\n\n\nListing 6.2: Separating the Affiliation values in scopus_dat into individual columns using separate_wider_delim().\n\nscopus_dat_wide &lt;- scopus_dat |&gt; \n  separate_wider_delim(cols = Affiliations, \n                       delim = \";\", \n                       names_sep = \"_\", \n                       too_few = \"align_start\")\n\n\n\n\n\n# Split the \"Affiliations\" column by \";\" and create new columns\ndata &lt;- scopus_dat %&gt;%\n  mutate(Affiliations = str_split(Affiliations, \";\\\\s*\")) %&gt;%\n  unnest_wider(Affiliations, names_sep = \"_\") %&gt;%\n  mutate(across(starts_with(\"Affiliation\"), trimws))\n\n# View the updated dataset\nprint(data)\n\n# A tibble: 483 × 330\n   Authors   `Author full names` `Author(s) ID` Title  Year `Source title` DOI  \n   &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;\n 1 Liu Z.; … Liu, Zhen (5722060… 57220604023; … Mult…  2024 Spectrochimic… 10.1…\n 2 Filinger… Filingeri, Davide … 55413673600; … Ther…  2024 Journal of Ph… 10.1…\n 3 Festa O.… Festa, Oscar (5735… 57357121400; … Comp…  2024 Ocean Enginee… 10.1…\n 4 Chirol C… Chirol, C. (571899… 57189933520; … Cree…  2024 Science of th… 10.1…\n 5 Stoodley… Stoodley, Paul (70… 7003908836; 5… Bioe…  2024 Biofilm        10.1…\n 6 Tong W.;… Tong, Weihao (5733… 57337088600; … Inve…  2024 Communication… 10.1…\n 7 Men J.; … Men, Jianan (58093… 58093849400; … The …  2024 Environmental… 10.1…\n 8 Dunn A.;… Dunn, Abby (575461… 57546197500; … Inve…  2024 Contemporary … 10.1…\n 9 Walker N… Walker, N.C. (5721… 57218377097; … A ma…  2024 Journal of Th… 10.1…\n10 Arcanjo … Arcanjo, Bruno (57… 57289892800; … Aggr…  2024 IEEE Robotics… 10.1…\n# ℹ 473 more rows\n# ℹ 323 more variables: Link &lt;chr&gt;, Affiliations_1 &lt;chr&gt;, Affiliations_2 &lt;chr&gt;,\n#   Affiliations_3 &lt;chr&gt;, Affiliations_4 &lt;chr&gt;, Affiliations_5 &lt;chr&gt;,\n#   Affiliations_6 &lt;chr&gt;, Affiliations_7 &lt;chr&gt;, Affiliations_8 &lt;chr&gt;,\n#   Affiliations_9 &lt;chr&gt;, Affiliations_10 &lt;chr&gt;, Affiliations_11 &lt;chr&gt;,\n#   Affiliations_12 &lt;chr&gt;, Affiliations_13 &lt;chr&gt;, Affiliations_14 &lt;chr&gt;,\n#   Affiliations_15 &lt;chr&gt;, Affiliations_16 &lt;chr&gt;, Affiliations_17 &lt;chr&gt;, …\n\n\nI’ll leave it for you to examine, but you should see we have 311 Affiliation variables now, many of the contain missing values NA. We still have 483 rows, but 330 variables in total.\n\nglimpse(scopus_dat_wide) \n\n\nHow do we get rid of all those missing values? We can fix that by changing the shape of the data to long with pivot_longer() and dropping any Affiliation values that are NA.\n\nConcretely, we have 311 Affiliation columns, if we pivot the table such that those column names become values in rows, the values from those columns fill a new single column variable, here Department, and we create a long table (with lots of duplicated information). And we can simply drop any row where the value of Department is NA.\nAs we have to say which columns we want to take the values from to fill Department and all our columns of interest begin with Affliation_, we can use the handy dpylr select function starts_with() to help us.\nThe name of each Affiliation_ column will be transformed to values in a column I’m going to call Affiliation_No.\nThis yields a table with 3722 rows and 21 columns, one more column than we started with in the original scopus_dat table.\n\n\n\nListing 6.3: Separating the Affiliation values in scopus_dat into individual columns using separate_wider_delim().\n\nscopus_dat_long &lt;- scopus_dat_wide |&gt; \n  pivot_longer(starts_with(\"Affiliations_\"),\n               names_to = \"Affiliation_No\", \n               values_to = \"Department\", \n               values_drop_na = TRUE)\n\n\n\n\n\nBut we’re only interested in the University of Southampton affiliations, so many of these rows aren’t of use to us.\n\n\n#glimpse(scopus_dat_long)\n\nscopus_dat_long_soton &lt;- scopus_dat_long |&gt; \n  filter(str_detect(Department,\"Southampton\"))\n\n#scopus_dat_long_other &lt;-  scopus_dat_long |&gt; \n # filter(!str_detect(Department,\"Southampton\"))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Wrangling bibliometrics data</span>"
    ]
  },
  {
    "objectID": "wrangling-bibliometrics-data.html#web-of-science",
    "href": "wrangling-bibliometrics-data.html#web-of-science",
    "title": "6  Wrangling bibliometrics data",
    "section": "\n6.3 Web of science",
    "text": "6.3 Web of science\nhttps://www.webofscience.com/wos/woscc/summary/1d7d2706-f966-4c7c-8cbd-85de6e118dc2-d8d761f7/relevance/1\n\n#dat_join &lt;- scopus_dat_long_soton |&gt; left_join(wos_dat, by = \"DOI\")\n\n\ndepartments &lt;- read_csv(\"https://github.com/ab604/library-r/raw/main/data/faculty-and-department-codes-2024-03-18.csv\")\n\ndept_names &lt;- departments |&gt; pull(department_name) |&gt; glue::glue_collapse(sep = \"|\")\n\nglimpse(dept_names)\n\n 'glue' chr \"Archaeology|Digital Humanities|English|Film|History|Languages, Cultures and Linguistics|Music|Philosophy|Winche\"| __truncated__\n\nsoton_depts &lt;- scopus_dat_long_soton |&gt; \n  mutate(department_name = str_extract(Department,dept_names))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Wrangling bibliometrics data</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Ihaka, Ross, and Robert Gentleman. 1996. “R: A Language for Data\nAnalysis and Graphics.” Journal of Computational and\nGraphical Statistics 5 (3): 299–314. https://doi.org/10.2307/1390807.\n\n\nWickham, Hadley. 2014. “Tidy Data.” Journal of\nStatistical Software 59 (September): 1–23. https://doi.org/10.18637/jss.v059.i10.",
    "crumbs": [
      "References"
    ]
  }
]