# Data wrangling II {#sec-data-wrangling-ii}

```{r}
#| label: dw2-set-up
#| echo: false
#| message: false
set.seed(1792) # For reproducibility
library(tidyverse)
library(palmerpenguins)
```

## Joins {#sec-joins}

We often want to join tables together based upon a variable or variables common to each table, **called a key or keys**, such as the digital object identifier (DOI) that is present in tables downloaded from both Scopus and Web of Science (@sec-scopus-data, @sec-web-of-science-data) in order to further transform the data or answer a question that cannot easily be answered from each table alone.

[R4DS joins](https://r4ds.hadley.nz/joins) gives some detailed examples of joining tables, but here we'll look at some simpler examples to try build our mental model about how to join tables.

There are two types of join we often encounter:

1.  Joins that create new variables in one table by matching observations in another: these are *mutating* joins as per tidyverse verb `mutate` @sec-creating-new-columns-with-mutate.
2.  Joins that *filter* the observations from one table against another, as per tidyverse verb `filter` @sec-filter-rows-with-filter.

`dplyr` has six join functions.

Mutating joins:

1.  **Left Join**: Returns all rows from the left table and the matched rows from the right table. `left_join()`
2.  **Right Join**: Similar to left join, but returns all rows from the right table and the matched rows from the left table. `right_join()`
3.  **Full Join**: Returns all rows from both tables, with null values in the columns where there are no matches. `full_join()`

Filtering joins:

4.  **Inner Join**: Returns only the rows that have matches in both tables. `inner_join()`
5.  **Semi Join**: Returns only the rows from the left table that have matches in the right table. `semi_join()`
6.  **Anti Join**: Returns only the rows from the left table that do not have matches in the right table. `anti_join()`

## Mutating joins {#sec-mutating-joins}

To demonstrate a mutating join using the `penguins` data, I first use `mutate` to create a unique identifier variable for each penguin from the row number called `penguin_id`, and assign this to a new dataframe `numbered_penguins`.

Then I use `numbered_penguins` to create two new dataframes using `select` (@lst-split-penguins) :

-   `penguins_physical` is a dataframe containing physical characteristics of penguins (e.g., bill length, flipper length, body mass).
-   `penguins_info` is a dataframe containing other information about penguins (e.g., species, island, year, sex).

```{r}
#| lst-label: lst-split-penguins
#| lst-cap: Create unique id for each penguin and split the penguins data into two tables, one with physical measurements, the other with the remaining variables.
# Create unique id for each penguin
numbered_penguins <- penguins |> 
  mutate(penguin_id = row_number())

# Split the dataset into two tables
penguins_physical <- numbered_penguins |>
  select(penguin_id, bill_length_mm, 
         bill_depth_mm, flipper_length_mm, body_mass_g)

penguins_info <- numbered_penguins |>
  select(penguin_id, species, island, year, sex)
```

The common key that we can use to join these tables back together is the `penguin_id` variable. The mutation part is the creation of new variables when two tables are joined to create a single table.

Here we'll use the `left_join()` function to combine the two dataframes `penguins_physical` and `penguins_info` based on the `penguin_number` column, which is common to both dataframes.

We assign the result to a new dataframe, `penguins_joined`, which contains all the columns from `penguins_physical` keyed to `penguin_id` from `penguins_info`.

The `left_join` function returns all records from the left dataframe (`penguins_physical`) and the matching records from the right dataframe (`penguins_info`). If there were no matches in the right dataframe, the result will contain null values for the right dataframe's columns.

As we didn't explicitly tell the function which variables to use, we got a message tells us it joined `by = join_by(penguin_id)`.

```{r}
#| lst-label: lst-left-join
#| lst-cap: Join the two penguins back together with a mutating left join
penguins_joined <- penguins_physical |>
  left_join(penguins_info)

# Print the joined dataset
glimpse(penguins_joined)
```

## Filtering join {#sec-filtering-join}

Here we'll do a filtering join, a semi-join.

First I'll filter the `penguins_info` I created just for the data from the year 2008:

```{r}
#| lst-label: lst-penguins-2008
#| lst-cap: Create a dataframe for penguins only for the year 2008
penguins_info_filt <- penguins_info |>
  filter(year == 2008)
```

Then we do a semi-join between the `penguins_physical` table and the filtered `penguins_info_filt` table. We still use the `penguin_id` as the key.

A semi-join returns only the rows from `penguins_physical` that have a match in `penguins_info_filt`, effectively filtering the physical characteristics of penguins to only include those from 2008. This joins data from 114 rows of the 344 rows in the `penguins_physical`.

As we didn't explicitly tell the function which variables to use, we got a message tells us it joined `by = join_by(penguin_id)`

I've assigned the resulting table to a new dataframe: `penguins_filtered`.

```{r}
#| lst-label: lst-penguins-semi-join
#| lst-cap: Perform a filtering semi join that returns only the rows from `penguins_physical` that match the rows in `penguins_info_filt`
penguins_filtered <- penguins_physical |>
  semi_join(penguins_info_filt)

# Print the filtered dataset
glimpse(penguins_filtered)
```

## Strings and characters {#sec-strings-and-characters}

The terms strings and characters are often used interchangeably, but a character is technically a single symbol or glyph, such as **&** or **a**, or even ðŸ™€. And a sequence of characters and/or symbols form a string.

In R to create character vector, we enclose the characters forming the string in quotes. For example, `"hello"` is a string, and each individual character within it (`h`, `e`, `l`, `l`, `o`) is a character. `"hello"` is a character vector of length 1 as there is one string of five characters.

`"hello world"` is also a character vector of length 1 as the white space also counts as a character.

However using combine function `c()` to create `c("hello", "world")` would create a character vector of length 2 as we have now created `"hello"` and `"world"` as separate strings.

::: {.callout-note title="Single or double quotes?" appearance="simple"}
Both single `'` or double `"` are allowed, but for consistent style I'd recommend double, unless your string itself contains multiple `"` as per the [tidyverse style guide](https://style.tidyverse.org/syntax.html#character-vectors).
:::

Frequently we are dealing with data in the form of character vectors or strings which we need to match or extract, such as the affiliation of an author for a journal article in Scopus data (@sec-scopus-data). `stringr` is a tidyverse package of functions specifically for these tasks, and more generally we use regular expressions to match strings.

### Regular expressions {#sec-regular-expressions}

A **regular expression** (regex) is a pattern used to match and manipulate strings. It's like a really powerful "find and replace" tool, but has completely unintuitive syntax!

You can use regex to specify a pattern, and then use that pattern to search for matches in a string. Once matched, we can extract or manipulate the strings in conjunction with other functions.

`stringr` is the tidyverse package for working with strings and regex. Many of the `stringr` functions allow us to avoid explicitly worrying about writing a regex, but we can always create a regex if needed.

Regex patterns consist of special characters, such as `.`, `*`, `+`, `?`, `{`, `}`, `[`, `]`, `(`, `)`, and `\`. These characters have special meanings, like "any character" ( `.` ), "zero or more" ( `*` ), or "start of string" ( `^` ). You can combine these characters to create complex patterns to match specific strings.

::: {.callout-warning title="Escaping regex special characters with backslash" appearance="simple"}
Because characters such dot `.` or asterisk `*` have special meaning in regex, if you want to treat them literally as a dot or asterisk, we have to *escape* their meta meaning.

To escape we use a backslash `\` before the special character such that to treat a dot as a dot we would write `\.` in our regex.
:::

### Getting started with `stringr` {#sec-getting-started-with-stringr}

To explore `stringr` we'll create a couple of character vectors:

1.  `ding_words`: a character vector of 20 words, all ending with `ding` using the `c()` function (@lst-ding-strings).

```{r}
#| lst-label: lst-ding-strings
#| lst-cap: "Create a character vector of twenty words ending in 'ding'"
ding_words <- c(
  "abounding",
  "astounding",
  "confounding",
  "resounding",
  "surrounding",
  "grounding",
  "founding",
  "pounding",
  "rounding",
  "sounding",
  "bounding",
  "hounding",
  "mounding",
  "wounding",
  "compounding",
  "expounding",
  "propounding",
  "rebounding",
  "unbounding",
  "floundering"
)
```

2.  `cat_names`: a character vector of 20 strings of cat names using the `c()` function (@lst-cat-strings)

```{r}
#| lst-label: lst-cat-strings
#| lst-cap: Create a character vector of twenty cat names
cat_names <-
  c(
    "Whiskers",
    "Fluffy",
    "Mittens",
    "Socks",
    "Tiger",
    "Smokey",
    "Gizmo",
    "Oreo",
    "Luna",
    "Oliver",
    "Leo",
    "Milo",
    "Charlie",
    "Simba",
    "Nala",
    "Felix",
    "Garfield",
    "Tigger",
    "Chloe",
    "Bella"
  )
```

#### Pattern Matching and Viewing {#sec-pattern-matching-and-viewing}

`str_view` is a function from the `stringr` package to search for patterns in the `words` vector. It returns a visual representation of the matches.

`str_view(words, "ding")`: searches for words containing the substring "ding" (@lst-str-view-words).

```{r}
#| lst-label: lst-str-view-words
#| lst-cap: "View the string 'ding' in `ding_words`"
str_view(ding_words,"ding")
```

`str_view(ding_words, "bou|rr")`: searches for words containing the substrings "bou" or "rr". The vertical bar `|` here is a special regex character that represent the Boolean OR operator (@lst-str-view-or).

```{r}
#| lst-label: lst-str-view-or
#| lst-cap: "View the string 'bou' or 'rr' in `ding_words`"
str_view(ding_words,"bou|rr")
```

#### Pattern Matching and Counting {#sec-pattern-matching-and-counting}

`str_detect` is a function is used to identify elements in the `cat_names` vector that contain the pattern "\[isk\]" (i.e., the characters "i", "s", or "k").

`str_detect(cat_names, "[isk]")`: returns a logical vector (`TRUE` or `FALSE`)indicating which names contain the pattern (@lst-string-detect):

```{r}
#| lst-label: lst-string-detect
#| lst-cap: Find whether cat names contain i,s or k is TRUE or FALSE
str_detect(cat_names,"(isk)") 
```

`str_count(cat_names, "[isk]")`: counts the number of occurrences of the pattern in each name (@lst-count-patterns):

```{r}
#| lst-label: lst-count-patterns
#| lst-cap: Count how many occurrences of i, s or k in each cat name
str_count(cat_names,"[isk]")
```

## String Replacement {#sec-string-replacement}

Having briefly looked at some of the ways we match strings, we can then replace them using the `str_replace` and `str_replace_all` functions.

Here we use to replace `str_replace` and `str_replace_all` to match the pattern "\[isk\]" in the `cat_names` vector and replace it with a dash (-):

`str_replace(cat_names, "[isk]", "-")`: replaces the first occurrence of the pattern in each name, that is the first occurrence of either `i`,`s` or `k` (@lst-str-replace):

```{r}
#| lst-label: lst-str-replace
#| lst-cap: Replace the first occurrence of i, s, or k in each name with a dash 
str_replace(cat_names,"[isk]","-") 
```

`str_replace_all(cat_names, "[isk]", "-")`: replaces all occurrences of the pattern in each name, that is all occurances of either `i`,`s` or `k` (@lst-str-replace-all):

```{r}
#| lst-label: lst-str-replace-all
#| lst-cap: Replaces all occurances of either i,s or k in each cat name
str_replace_all(cat_names,"[isk]","-")
```

## Creating the `cat_tibble`

To demonstrate using `stringr` and regular expressions to match a pattern in order to split a single column variable into two column variables as we will for the bibliometrics data (@sec-separating-the-scopus-affiliations, @sec-separating-the-wos-affiliations) let's make a new cat based table called `cat_tibble`.

The code in @lst-cat-tibble creates `cat_tibble` a tibble dataframe with a single column `cat_id`.

Here we use the `str_c` function to concatenate strings. We're creating a string that looks like `<name>-sex_age>`, e.g. `<Whiskers>-M_5` where:

-   `<` is the literal character
-   `cat_names` is the vector of cat names
-   `>` is the literal character
-   `sample(c("-M_","-F_"), ...)` generates a random sex indicator (`-M_` for male or `-F_` for female) for each cat
-   `sample(3:11, ...)` generates a random age (between 3 and 11) for each cat
-   We pass the arguments `size = length(cat_names), replace = TRUE` to the `sample()` function to indicate we want the same number of values as the length of the `cat_names` vector, which is 20 names long.

```{r}
#| lst-label: lst-cat-tibble
#| lst-cap: Creating the cat tibble
cat_tibble <- tibble(
  cat_id = str_c("<", cat_names, ">",
                 sample(c("-M_","-F_"),
                        size = length(cat_names),
                      replace = TRUE),
               sample(3:15, size = length(cat_names),
                      replace = TRUE))
)
```

Let's inspect the our new table @lst-view-cat-tibble :

```{r}
#| lst-label: lst-view-cat-tibble
#| lst-cap: View the `cat_tibble`
cat_tibble
```

# Separating the `cat_id` column into multiple columns

Having created a table with a single variable that combines name, sex and age into a single variable `cat_id` (@lst-view-cat-tibble), it would be much more useful to have these as three separate variables: `name`, `sex`, and `age`.

We can do this using the `separate_wider_regex` function from the `tidyr` package to split the `cat_id` column into separate columns based on regular expression patterns (@lst-wide-cat).

```{r}
#| lst-label: lst-wide-cat
#| lst-cap: Separate `cat_tibble` wider by regex.
cat_tibble |>
  separate_wider_regex(
    cat_id,
    patterns = c("<",
      name = "[A-Za-z]+", ">-",
      sex = ".","_",
      age = "[0-9]+")
  )
```

The `patterns` argument is a named character vector created with the `c()` function defining the regular expression patterns to match and new variables to created by extracting strings from the `cat_id` column. **We must match the whole pattern, including strings we don't want.**

Specifically:

-   `<` matches the literal `<` character, we don't want this, so we don't name it
-   `name = "[A-Za-z]+"` extracts one or more alphabetic characters (the cat's name) to a new variable `name`.
-   `">-"` matches the literal `>-` characters, we don't want this, so we don't name it.
-   `sex = ".",`extracts the next single character (`.`) to a new variable called `sex`. Here it's `M` or `F` to indicate the sex of the cat.
-   `"_"` matches the literal underscore character (`_`), we don't want this, so we don't name it.
-   `age = "[0-9]+"` extracts one or more digits to a new variable called `age`.

With these tools we can now tackle the bibliometrics data.
