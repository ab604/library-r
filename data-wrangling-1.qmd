# Data wrangling I {#sec-data-wrangling-i}

::: {#chapter-03-summary .callout-important .unnumbered title="Summary" appearance="simple" icon="false"}
Chapter 3 summary
:::

```{r}
#| label: set-up
#| message: false
#| echo: false
library(palmerpenguins)
library(dplyr)
library(flextable)
```

## Organising your data in spreadsheets {#sec-spreadsheets}

[Data Organization in Spreadsheets by Karl W. Broman & Kara H. Woo](https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1375989) is full of practical advice and context. It is well worth reading for helping you think about best practices for organising your data for yourself, and when working with others.

### Plain formats and Excel files

File formats like `.csv` and `.tsv`, comma separated variables and tab separated variables respectively are plain text files. That is to say they contain only the data, as text information, and are the simplest and most convenient way to share data as lots of software, including Excel, can read and interpret them.

Excel files saves files into its own proprietary format `.xls` or `.xlsx` that holds information in addition to the data itself (metadata). For reading and writing excel files in R, tidyverse `readxl` package is the place to start: [readxl homepage](https://readxl.tidyverse.org/).

## The pipe `|>` {#sec-the-pipe}

The pipe operator `|>` allows you to combine operations by passing the output of an object or function to another. It will make more sense why this is a good thing once we start writing code, but you can think of it as a coding adverb such as *then*.

In the example below, the `penguins` dataframe is piped to the `count` function which has `species` as its argument. Think of it as: *Return the penguins table then count how many rows there are for each species*.

::: {.callout-tip .unnumbered title="Pipe style" appearance="simple" icon="true"}
The recommended pipe style is a space before a pipe and the pipe to be the last thing on a line, like so:

```{r}
#| eval: false
penguins |> 
  count(species)
```

This makes reading and adding new steps easier.
:::

The pipe `|>` was added to R as of version 4.1.0 , you may see the `%>%` pipe from the `magrittr` package sometimes, but it's simpler to use the native version. 
However, you may need to check the native pipe is enabled in the `Options` (@fig-pipe).

```{r}
#| label: fig-pipe
#| echo: false
#| out-width: NULL
#| fig-cap: |
#|   Setting the native pipe `|>` option in RStudio
#| fig-alt: |
#|   An image of the settings for the native pipe `|>` option in RStudio.

knitr::include_graphics("img/R-native-pipe.PNG")
```

The shortcut for the pipe operator is `Ctl+Shift+M` on Windows or `Cmd+Shift+M` on a Mac.

## Introducing `dplyr` {#sec-introducing-dplyr}

[`dplyr`](https://dplyr.tidyverse.org/) *"is a grammar of data manipulation"*. Concretely, it's a package of functions from the tidyverse that have been created for tasks that require manipulation of data stored in data frames @sec-data-frames.

As mentioned in @sec-base-r-tidyverse, the grammar is the naming of the functions as verbs. Personally, I find this parallel between R code and human language makes things cognitively easier for me. I can describe what I want to do using natural language and translate it easily into tidyverse code.

```{r}
#| label: fig-dplyr-name
#| echo: false
#| out-width: NULL
#| fig-cap: |
#|   [Why is it called `dplyr`?](https://github.com/tidyverse/dplyr/issues/1857)
#| fig-alt: |
#|   The creator of dplyr Hadley Wickham explains that in the name, d is for dataframes and plyr is to evoke the tool pliers.

knitr::include_graphics("img/dplyr-name-github.png")
```

## The four most common `dplyr` verbs

We'll use the four most common verbs in `dplyr` to examine the Palmer Penguins data (@sec-palmer-penguins).

### Filter rows with `filter()`

To remind you, the `penguins` data frame has 344 rows (@sec-palmer-penguins). 
Each row contains a set of observations contained in the columns for a single penguin from one of three species (@fig-palmer-penguins) living on one of three islands.

So if for example we wanted to *filter* the data frame for only the rows of penguins
with a bills longer or equal to 50 mm, we would use the `filter` function as shown in
@fig-filter.

The function takes the `penguins` data frame object as the first argument. Either within the
parentheses or via a pipe. 

The second argument is the column (variable) we wish to filter on, in this case `bill_length_mm` and a logical expression (evaluates as `TRUE` or `FALSE`) that is the filter. 

Here the expression is greater or equal to 50 `>= 50`. 

So any row with a value in `bill_length_mm` greater or equal to 50 is `TRUE` and is retained and any row with a value less than 50 is  `FALSE` and is discarded.

```{r}
#| label: fig-filter 
#| echo: false
#| out-width: 80%
#| fig-cap: |
#|   The `dplyr filter` function. The filter function returns rows from your data frame that satisfy your filter expression as `TRUE`. Here it will return all Palmer Penguins with a bill longer or equal to 50 mm. Here it shows how filter will return all Palmer Penguins with a bill longer or equal to 50 mm. The function can either be used by providing the `penguins` data.frame as the first argument to the function or by passing the `penguins` data frame via a pipe.
#| fig-alt: |
#|  The dplyr filter function. The filter function returns rows from your data frame that satisfy your filter expression as `TRUE`. Here it shows how filter will return all Palmer Penguins with a bill longer or equal to 50 mm, either by using `penguins` dataframe as the first argument to the function or by passing the `penguins` data frame via a pipe.

knitr::include_graphics("img/dplyr-filter-penguin.png", dpi = 270)
```

Here is the code, note that I've piped the output to the dplyr `glimpse()` function 
which provides a summary of the filtered data frame contents. 

Instead of a table of 344 penguins, we've returned a data frame with the 57 penguins (rows) 
that have bills equal or longer than 50 mm, but we still have 8 columns (variables) as `filter()`
only acts on the rows.

```{r}
#| label: filter-penguins
penguins |> 
  filter(bill_length_mm >= 50) |> 
  glimpse()
```
Filtering can be done using multiple columns and expressions.

### Arranging rows with `arrange()`

Another row verb is `arrange()` which as the name suggests *arranges the rows* according
to column values. 

```{r}
#| eval: false
penguins |> 
  head() 
```

```{r}
#| echo: false
#| warning: false
penguins |> 
  head() |> 
  qflextable() |>
  colformat_num(big.mark = "", decimal.mark = "", na_str = "NA") |>
  colformat_char(na_str = "NA") |>
  font(part = "all", fontname = "Consolas") |>
  bg(bg = "white", part = "all") |> 
  color(j = "flipper_length_mm", color = "#E73037") |> 
  #color(j = "island", color = "#005C84") |> 
  autofit()
```
```{r}
#| eval: false
penguins |> 
  arrange(flipper_length_mm) |> 
  head()
```

```{r}
#| echo: false
#| warning: false
penguins |> 
  arrange(flipper_length_mm) |> 
  head() |> 
  qflextable() |>
  colformat_num(big.mark = "", decimal.mark = "", na_str = "NA") |>  
  font(part = "all", fontname = "Consolas") |>
  bg(bg = "white", part = "all") |>
  color(j = "flipper_length_mm", color = "#E73037") |> 
  #color(j = "island", color = "#005C84") |> 
  autofit()
```

```{r}
#| echo: false
#| eval: false
penguins |>
  group_by(island) |> 
  arrange(flipper_length_mm, .by_group = TRUE) |> 
  head()
```

```{r}
#| label: fig-arrange 
#| echo: false
#| out-width: 80%
#| fig-cap: |
#|   The `dplyr arrange` function. The arrange function orders rows from your data frame according to column variables. Here it will order the Palmer Penguins data.frame according to their flipper length. The function can either be used by providing the `penguins` data.frame as the first argument to the function or by passing the `penguins` data.frame via a pipe.
#| fig-alt: |
#|  The dplyr arrange function. The arrange function orders rows from your data frame according to column variables. Here it will order the Palmer Penguins data.frame according to their flipper length. The function can either be used by providing the `penguins` dataframe as the first argument to the function or by passing the `penguins` dataframe via a pipe.

knitr::include_graphics("img/dplyr-arrange-penguin.png", dpi = 270)
```

### Selecting columns with `select()`

```{r}
#| label: fig-select 
#| echo: false
#| out-width: 80%
#| fig-cap: |
#|   The `dplyr select` function. This function selects columns from your data frame. Here it will select the island and year columns from Palmer Penguins data.frame. The function can either be used by providing the `penguins` data.frame as the first argument to the function or by passing the `penguins` data.frame via a pipe.
#| fig-alt: |
#|  The `dplyr select` function. This function selects columns from your data frame. Here it will select the island and year columns from Palmer Penguins data.frame. The function can either be used by providing the `penguins` data.frame as the first argument to the function or by passing the `penguins` data.frame via a pipe.

knitr::include_graphics("img/dplyr-select-penguin.png", dpi = 270)
```

### Creating new columns with `mutate()`

```{r}
#| label: fig-mutate
#| echo: false
#| out-width: 80%
#| fig-cap: |
#|   The `dplyr mutate` function. The mutate function creates new column variables in your data frame. Here mutate creates a new variable called `body_mass_kg` in the Palmer Penguins data.frame by dividing the values in the `body_mass_g` column by 1000 and storing the answer in new variable `body_mass_kg`. The function can either be used by providing the `penguins` data.frame as the first argument to the function or by passing the `penguins` data.frame via a pipe.
#| fig-alt: |
#|  The `dplyr mutate` function. The mutate function creates new column variables in your data frame. Here mutate creates a new variable called `body_mass_kg` in the Palmer Penguins data.frame by dividing the values in the `body_mass_g` column by 1000 and storing the answer in new variable `body_mass_kg`. The function can either be used by providing the `penguins` data.frame as the first argument to the function or by passing the `penguins` data.frame via a pipe.

knitr::include_graphics("img/dplyr-mutate-penguin.png", dpi = 270)
```

## Creating grouped summaries with `dplyr`

```{r}
#| label: penguin-summary
penguins |> 
  summarise(mean_mass_g = mean(body_mass_g,na.rm = TRUE), n_penguins = n())
```

```{r}
#| label: penguin--grouped-summary
penguins |> 
  group_by(species) |> 
  summarise(mean_mass_g = mean(body_mass_g,na.rm = TRUE), n_penguins = n())
```

### Using `group_by()` and `summarise()` together

## Pivots

```{r}
#| label: fig-pivot 
#| echo: false
#| out-width: NULL
#| fig-cap: |
#|   pivot
#| fig-alt: |
#|  pivot

knitr::include_graphics("img/pivot-penguins.png", dpi = 270)
```

```{r}
#| label: fig-pivot-animation 
#| echo: false
#| out-width: NULL
#| fig-cap: |
#|   pivot
#| fig-alt: |
#|  pivot

knitr::include_graphics("img/tidyr-pivoting.gif", dpi = 270)
```
