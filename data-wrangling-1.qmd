# Data wrangling I {#sec-data-wrangling-i}

::: {#chapter-03-summary .callout-important .unnumbered title="Summary" appearance="simple" icon="false"}
This chapter covers some common tasks for working with tabular data using the tidyverse packages `dplyr` and `tidyr`. The tasks are filtering for rows of interest, arranging the rows, selecting columns of interest, creating new columns, creating grouped summaries of the table, and re-shaping (aka pivoting) the table.
:::

```{r}
#| label: set-up
#| message: false
#| echo: false
library(palmerpenguins)
library(dplyr)
library(tidyr)
library(flextable)
```

## Organising your data in spreadsheets {#sec-spreadsheets}

[Data Organization in Spreadsheets by Karl W. Broman & Kara H. Woo](https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1375989) is full of practical advice and context. It is well worth reading for helping you think about best practices for organising your data for yourself, and when working with others.

### Plain formats and Excel files

File formats like `.csv` and `.tsv`, comma separated variables and tab separated variables respectively are plain text files. That is to say they contain only the data, as text information, and are the simplest and most convenient way to share data as lots of software, including Excel, can read and interpret them.

Excel files saves files into its own proprietary format `.xls` or `.xlsx` that holds information in addition to the data itself (metadata). For reading and writing excel files in R, tidyverse `readxl` package is the place to start: [readxl homepage](https://readxl.tidyverse.org/).

When we install the tidyverse packages, `readxl` is installed, but not loaded by default when we load `library(tidyverse)` so we have to load it separately, `library(readxl)`.

## The pipe `|>` {#sec-the-pipe}

The pipe operator `|>` allows you to combine operations by passing the output of an object or function to another. It will make more sense why this is a good thing once we start writing code, but you can think of it as a coding adverb such as *then*.

In the example below, the `penguins` data frame is piped to the `count` function from `dplyr` (@sec-introducing-dplyr) which has the `species` column as its argument.

Think of it as: *Return the penguins table **then** count how many rows there are for each different penguin species*.

**Note** that as I am not assigning the output to an object with `<-` (@sec-assigning-objects) the output is returned to the console.

::: {.callout-tip .unnumbered title="Pipe style" appearance="simple" icon="true"}
The recommended pipe style is a space before a pipe and the pipe to be the last thing on a line, like so:

```{r}
#| label: count-penguins
#| eval: true
penguins |> 
  count(species)
```

This makes reading and adding new steps easier.
:::

The pipe `|>` was added to R as of version 4.1.0 , you may see the `%>%` pipe from the `magrittr` package sometimes, but it's simpler to use the native version. However, you may need to check the native pipe is enabled in the `Options` (@fig-pipe).

```{r}
#| label: fig-pipe
#| echo: false
#| out-width: NULL
#| fig-cap: |
#|   Setting the native pipe `|>` option in RStudio
#| fig-alt: |
#|   An image of the settings for the native pipe `|>` option in RStudio.

knitr::include_graphics("img/R-native-pipe.PNG")
```

The shortcut for the pipe operator is `Ctl+Shift+M` on Windows or `Cmd+Shift+M` on a Mac.

## Introducing `dplyr` {#sec-introducing-dplyr}

[`dplyr`](https://dplyr.tidyverse.org/) *"is a grammar of data manipulation"*. Concretely, it's a package of functions from the tidyverse that have been created for tasks that require manipulation of data stored in data frames @sec-data-frames.

As mentioned in @sec-base-r-tidyverse, the grammar is the naming of the functions as verbs. Personally, I find this parallel between R code and human language makes things cognitively easier for me. I can describe what I want to do using natural language and translate it easily into tidyverse code.

```{r}
#| label: fig-dplyr-name
#| echo: false
#| out-width: NULL
#| fig-cap: |
#|   [Why is it called `dplyr`?](https://github.com/tidyverse/dplyr/issues/1857)
#| fig-alt: |
#|   The creator of dplyr Hadley Wickham explains that in the name, d is for dataframes and plyr is to evoke the tool pliers.

knitr::include_graphics("img/dplyr-name-github.png")
```

## The four most common `dplyr` verbs {#sec-the-four-most-common-dplyr-verbs}

We'll use the four most common verbs in `dplyr` to examine the Palmer Penguins data (@sec-palmer-penguins).

### Filter rows with `filter()` {#sec-filter-rows-with-filter}

To remind you, the `penguins` data frame has 344 rows (@sec-palmer-penguins). Each row contains a set of observations contained in the columns for a single penguin from one of three species (@fig-palmer-penguins) living on one of three islands.

So if for example we wanted to *filter* the data frame for only the rows of penguins with a bills longer or equal to 50 mm, we would use the `filter` function as shown in @fig-filter.

The function takes the `penguins` data frame object as the first argument. Either within the parentheses or via a pipe.

The second argument is the column (variable) we wish to filter on, in this case `bill_length_mm` and a logical expression (evaluates as `TRUE` or `FALSE`) that is the filter.

Here the expression is greater or equal to 50 `>= 50`.

So any row with a value in `bill_length_mm` greater or equal to 50 is `TRUE` and is retained and any row with a value less than 50 is `FALSE` and is discarded.

```{r}
#| label: fig-filter 
#| echo: false
#| out-width: 80%
#| fig-cap: |
#|   The `dplyr filter` function. The filter function returns rows from your data frame that satisfy your filter expression as `TRUE`. Here it will return all Palmer Penguins with a bill longer or equal to 50 mm. Here it shows how filter will return all Palmer Penguins with a bill longer or equal to 50 mm. The function can either be used by providing the `penguins` data.frame as the first argument to the function or by passing the `penguins` data frame via a pipe.
#| fig-alt: |
#|  The dplyr filter function. The filter function returns rows from your data frame that satisfy your filter expression as `TRUE`. Here it shows how filter will return all Palmer Penguins with a bill longer or equal to 50 mm, either by using `penguins` dataframe as the first argument to the function or by passing the `penguins` data frame via a pipe.

knitr::include_graphics("img/dplyr-filter-penguin.png", dpi = 270)
```

Here is the code, note that I've piped the output to the dplyr [`glimpse()`](https://dplyr.tidyverse.org/reference/glimpse.html) function which prints a transposed summary of the filtered data frame contents to the console.

Instead of a table of 344 penguins, we've returned a data frame with the 57 penguins (rows) that have bills equal or longer than 50 mm, but we still have 8 columns (variables) as `filter()` only acts on the rows.

```{r}
#| label: filter-penguins
penguins |> 
  filter(bill_length_mm >= 50) |> 
  glimpse()
```

Filtering can be done using multiple columns and expressions. See the official [filter documentation](https://dplyr.tidyverse.org/reference/filter.html) for more complex examples.

### Arranging rows with `arrange()` {#sec-arranging-rows-with-arrange}

Another row verb is `arrange()` which as the name suggests *arranges the rows* according to column values (@fig-arrange).

Here I'll pipe the `penguins` data frame to the base R `head()` function, which returns the first six rows by default. Again I am returning the output to the console.

I've formatted the output slightly here to highlight `flipper_length_mm` in red, so it may look a bit different to your output. We can see that row four is one of the two rows with missing values (indicated by `NA`) that we first encountered as a warning when we plotted this data (@sec-plotting-and-exporting-data).

```{r}
#| eval: false
penguins |> 
  head() 
```

```{r}
#| echo: false
#| warning: false
penguins |> 
  head() |> 
  qflextable() |>
  colformat_num(big.mark = "", decimal.mark = "", na_str = "NA") |>
  colformat_char(na_str = "NA") |>
  font(part = "all", fontname = "Consolas") |>
  bg(bg = "white", part = "all") |> 
  color(j = "flipper_length_mm", color = "#E73037") |> 
  #color(j = "island", color = "#005C84") |> 
  autofit()
```

Next I add another line of code using `arrange(flipper_length_mm)` to sort the rows according to the values in this column. It defaults to ascending order.

```{r}
#| eval: false
penguins |> 
  arrange(flipper_length_mm) |> 
  head()
```

```{r}
#| echo: false
#| warning: false
penguins |> 
  arrange(flipper_length_mm) |> 
  head() |> 
  qflextable() |>
  colformat_num(big.mark = "", decimal.mark = "", na_str = "NA") |>  
  font(part = "all", fontname = "Consolas") |>
  bg(bg = "white", part = "all") |>
  color(j = "flipper_length_mm", color = "#E73037") |> 
  #color(j = "island", color = "#005C84") |> 
  autofit()
```

To arrange for descending order, I need to use the `desc()` function in combination with `arrange()` like so:

```{r}
#| eval: false
penguins |> 
  arrange(desc(flipper_length_mm)) |> 
  head()
```

```{r}
#| echo: false
#| warning: false
penguins |> 
  arrange(desc(flipper_length_mm)) |> 
  head() |> 
  qflextable() |>
  colformat_num(big.mark = "", decimal.mark = "", na_str = "NA") |>  
  font(part = "all", fontname = "Consolas") |>
  bg(bg = "white", part = "all") |>
  color(j = "flipper_length_mm", color = "#E73037") |> 
  #color(j = "island", color = "#005C84") |> 
  autofit()
```

```{r}
#| echo: false
#| eval: false
penguins |>
  group_by(island) |> 
  arrange(flipper_length_mm, .by_group = TRUE) |> 
  head()
```

Further guidance about `arrange()` from [R4DS](https://r4ds.had.co.nz/transform.html#arrange-rows-with-arrange):

> "If you provide more than one column name, each additional column will be used to break ties in the values of preceding columns... Missing values are always sorted at the end."

```{r}
#| label: fig-arrange 
#| echo: false
#| out-width: 80%
#| fig-cap: |
#|   The `dplyr arrange` function. The arrange function orders rows from your data frame according to column variables. Here it will order the Palmer Penguins data.frame according to their flipper length. The function can either be used by providing the `penguins` data.frame as the first argument to the function or by passing the `penguins` data.frame via a pipe.
#| fig-alt: |
#|  The dplyr arrange function. The arrange function orders rows from your data frame according to column variables. Here it will order the Palmer Penguins data.frame according to their flipper length. The function can either be used by providing the `penguins` dataframe as the first argument to the function or by passing the `penguins` dataframe via a pipe.

knitr::include_graphics("img/dplyr-arrange-penguin.png", dpi = 270)
```

### Selecting columns with `select()` {#sec-selecting-columns-with-select}

Often your data contains variables you don't need for the analysis you are performing, or you want to subset them to share with others. To select only the ones you need, or explore subsets of the variables, the `select()` verb enables you to keep only the columns of interest.

@fig-select shows the use of `select()` to choose only the `island` and `year` columns, with or without the pipe.

Selecting the variables contained in the columns can be done in various ways. For example, by the column number, the variable name or by range. Check the help function `?select` for more options.

```{r}
#| label: fig-select 
#| echo: false
#| out-width: 80%
#| fig-cap: |
#|   The `dplyr select` function. This function selects columns from your data frame. Here it will select the island and year columns from Palmer Penguins data.frame. The function can either be used by providing the `penguins` data.frame as the first argument to the function or by passing the `penguins` data.frame via a pipe.
#| fig-alt: |
#|  The `dplyr select` function. This function selects columns from your data frame. Here it will select the island and year columns from Palmer Penguins data.frame. The function can either be used by providing the `penguins` data.frame as the first argument to the function or by passing the `penguins` data.frame via a pipe.

knitr::include_graphics("img/dplyr-select-penguin.png", dpi = 270)
```

Let's do this a couple of ways, first reminding ourselves of what the columns are using `glimpse()`. I'll continue with the piped approach.

```{r}
#| label: penguin-select-1
penguins |> 
  glimpse()
```

So we can see the eight column names and that `island` is column 2 and `year` is column 8.

Let's select by name:

```{r}
#| label: penguin-select-2
penguins |> 
  select(island, year) |> 
  glimpse()
```

By column number:

```{r}
#| label: penguin-select-3
penguins |> 
  select(2,8) |> 
  glimpse()
```

By negative selection using the minus sign `-` to exclude the columns we don't want:

```{r}
#| label: penguin-select-4
penguins |> 
  select(-species,-bill_length_mm, -bill_depth_mm,
         -flipper_length_mm,-body_mass_g, -sex) |> 
  glimpse()
```

See the [`select` documentation](https://dplyr.tidyverse.org/reference/select.html) for other approaches for using select such as renaming columns, reordering the columns or picking variables with selection helper functions.

### Creating new columns with `mutate()` {#sec-creating-new-columns-with-mutate}

Another common task is to create a new variable or variables, often from existing data within the data frame. For this we use the `mutate()` verb. It follows the same syntax as for `filter()`, `arrange()` and `select()` in that the first argument is the dataset, and the subsequent arguments are the new variables we wish to create (@fig-mutate).

```{r}
#| label: fig-mutate
#| echo: false
#| out-width: 80%
#| fig-cap: |
#|   The `dplyr mutate` function. The mutate function creates new column variables in your data frame. Here mutate creates a new variable called `body_mass_kg` in the Palmer Penguins data.frame by dividing the values in the `body_mass_g` column by 1000 and storing the answer in new variable `body_mass_kg`. The function can either be used by providing the `penguins` data.frame as the first argument to the function or by passing the `penguins` data.frame via a pipe.
#| fig-alt: |
#|  The `dplyr mutate` function. The mutate function creates new column variables in your data frame. Here mutate creates a new variable called `body_mass_kg` in the Palmer Penguins data.frame by dividing the values in the `body_mass_g` column by 1000 and storing the answer in new variable `body_mass_kg`. The function can either be used by providing the `penguins` data.frame as the first argument to the function or by passing the `penguins` data.frame via a pipe.

knitr::include_graphics("img/dplyr-mutate-penguin.png", dpi = 270)
```

Here I'll use the piped syntax again and `glimpse()` on the output to create a new variable for penguin body mass in kilograms called `body_mass_kg` from the existing body mass in grams variable by dividing by 1,000 using `mutate()`.

I'm also going to use `select()` to select only the `species`, `body_mass_g` and new variable `body_mass_kg` and then `head()` to view the first six rows to make the output a bit easier to read.

```{r}
#| label: penguin-mutate
#| eval: false
penguins |> 
  mutate(body_mass_kg = body_mass_g/1000) |> 
  select(species, body_mass_g, body_mass_kg) |> 
  head()
```

```{r}
#| echo: false
#| warning: false
penguins |> 
  mutate(body_mass_kg = body_mass_g/1000) |> 
  select(species,island,body_mass_g,body_mass_kg) |> 
  head() |> 
  qflextable() |>
  colformat_num(big.mark = "", decimal.mark = ".", na_str = "NA") |>  
  font(part = "all", fontname = "Consolas") |>
  bg(bg = "white", part = "all") |>
  color(j = "body_mass_kg", color = "#E73037") |> 
  color(j = "body_mass_g", color = "#005C84") |> 
  autofit()
```

## Creating grouped summaries with `dplyr` {#sec-creating-grouped-summaries}

Another powerful feature of `dplyr` is it's ability to summarise the entire dataset in a single row.

```{r}
#| label: penguin-summary
penguins |> 
  summarise(mean_mass_g = mean(body_mass_g, na.rm = TRUE))
```

```{r}
#| label: penguin--grouped-summary
penguins |> 
  group_by(species) |> 
  summarise(mean_mass_g = mean(body_mass_g, na.rm = TRUE), 
            n_penguins = n())
```

### Using `group_by()` and `summarise()` together

Calculating the average bill length and depth for each species

pipe the `penguins` dataset into the `group_by()` function, which groups the data by the `species` variable. - We then use the `summarise()` function to calculate the average bill length and depth for each species using `mean()`. - The `na.rm = TRUE` argument is used to remove any missing values before calculating the means.

```{r}
# Calculate the average bill length and depth for each species
penguins |>
  group_by(species) |>
  summarise(
    avg_bill_length = mean(bill_length_mm, na.rm = TRUE),
    avg_bill_depth = mean(bill_depth_mm, na.rm = TRUE)
  )
```

Count the number of penguins by island and sex. We start with the `penguins` dataset and pipe it into the `group_by()` function to group the data by both `island` and `sex` variables. As before, we then use the `summarise()` function along with `n()` to count the number of penguins in each group.

```{r}
#| message: false
# Count the number of penguins by island and sex
penguins |>
  group_by(island, sex) |>
  summarise(mean_mass_g = mean(body_mass_g,na.rm = TRUE), 
            n_penguins = n())
```

## Pivots

Data can be untidy in different ways. One way might be that the values are in the variable names. Or perhaps the reverse is true and you'd like the values to be column names.

Reshaping a table is called pivoting. If one pivots a table that leads to increasing the number of rows one would use the [`tidyr` package](https://tidyr.tidyverse.org/index.html) function `pivot_longer()` and if one pivots a table to increase the number of columns one would use `pivot_wider()` (@fig-pivot and @fig-pivot-animation).

```{r}
#| label: fig-pivot 
#| echo: false
#| out-width: NULL
#| fig-cap: |
#|   pivot
#| fig-alt: |
#|  pivot

knitr::include_graphics("img/pivot-penguins.png", dpi = 270)
```

```{r}
#| label: fig-pivot-animation 
#| echo: false
#| out-width: NULL
#| fig-cap: |
#|   pivot
#| fig-alt: |
#|  pivot

knitr::include_graphics("img/tidyr-pivoting.gif", dpi = 270)
```

To demonstrate the pivot as in @fig-pivot and @fig-pivot-animation, we need a unique identifier for each row which I'll create a variable called `id` using `mutatae` and the `dplyr` function `row_number()` which as you might guess, counts the row number and returns an integer.

We pivot longer by transforming column variable names, here: `species` , `island` and `sex` into values stored in a new variable that I've named `key`.

The existing values from those columns are placed in the cells of a new variable I've called `val`.

In this way the table gets longer as there are now three rows for the data about each penguin, hence the `id` column I created for each penguin has three repeating values, one for each row corresponding with the original columns.

```{r}
#| label: pivot-long
# Pivot the data longer
penguins_long <- penguins |>
  # Add id column from row number to create a unique identifier
  mutate(id = row_number()) |> 
  select(species, island, sex, id) |> 
  pivot_longer(
    cols = species:sex,
    names_to = "key",
    values_to = "val"
  )

glimpse(penguins_long)  
```

To pivot from long to wide, we reverse the procedure by using values in `key` to create variable names for columns and populate the columns with the values from our `val` column.

This returns us to one row per penguin, with four columns.

```{r}
#| label: pivot-wide
# Pivot the data wider
penguins_wide <- penguins_long |> 
  pivot_wider(
    names_from = "key",
    values_from = "val"
  )

glimpse(penguins_wide)
```

The trick with pivots is trying to understand which column variables you transform into as values to pivot longer. Or which values you want to become variables to pivot wider. If often takes a couple of attempts to get it right.
