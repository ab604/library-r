# Markup Languages {#sec-markup-languages}

::: {#chapter-summary .callout-important .unnumbered title="Summary" appearance="simple" icon="false"}
This chapter can be skipped if you just want to learn about R. It introduces markup languages, confusingly called markdown, that encode text and documents such as the one you are reading.

The relevance here is two-fold:

1.  Languages such as R can be integrated with markup languages to do what is called literate programming where one writes code and text in the same document. As opposed to writing code script(s) and report(s) separately. The code and text are evaluated separately, but outputted together.
2.  Markup languages work with the universal document converter Pandoc, hence working in markdown means one can easily produce outputs in Word, pdf, html etc. all from the same input document.
:::

## What is markup? {#sec-what-is-markup}

Wikipedia has detailed pages on the history of typesetting pre and post the invention of computing. For example, the [Wikipedia page on letter case](https://en.wikipedia.org/wiki/Letter_case) describes how capital letters were often kept in the upper case of the drawers that contained the letters used in the printing press. Hence upper-case meaning capital in typesetting.

Much of this typography jargon naturally got carried over when computers came along, and marking up is both a digital and analogue term.

In the analogue sense markup is usually an instruction or comment to the author for revisions.

In the digital sense marking up is syntax on how to format or structure the text e.g. a heading, line break, **bold** or *italic* when it is rendered. Here you are reading [Quarto markdown](https://quarto.org/docs/authoring/markdown-basics.html) (@sec-quarto-markdown) that has been rendered as a html book.

Again the [Wikipedia markup languages page](https://en.wikipedia.org/wiki/Markup_language) is great if you want the full details.

MS Word documents are markup language files in a [XML](https://en.wikipedia.org/wiki/XML) format.

::: {.callout-tip .unnumbered appearance="simple" icon="false"}
As an aside, it's often possible to make sense of computing jargon if you can trace the analogue history in the relevant domain. Such as the term layers in computer graphics deriving from layers of paper used in pre-computing design.
:::

## What is markdown? {#sec-what-is-markdown}

So why markdown?

Readability is the short answer, but again a longer better answer is on the [Markdown Wikipedia page](https://en.wikipedia.org/wiki/Markdown) and the [Markdown project page](https://daringfireball.net/projects/markdown/).

Markdown was created to be human readable and easy to write, as compared with heavier markup languages such as html or xml. And its growing popularity since 2004 and off-shoot flavours of markdown suggest it has been successful.

Below is are examples of markdown source code and outputs, where `#` marks up a first level header `##` marks up the second level header, and `###` marks up the third level header. Bullet points are marked-up with `+` or `-` .

+-----------------------------+------------------------------------------+
| Markdown Syntax             | Output                                   |
+=============================+==========================================+
| ``` {.markdown .unnumbered} | # A First Level Header {.unnumbered}     |
| # A First Level Header      |                                          |
| ```                         |                                          |
+-----------------------------+------------------------------------------+
| ``` {.markdown .unnumbered} | ## A Second Level Header {.unnumbered}   |
| ## A Second Level Header    |                                          |
| ```                         |                                          |
+-----------------------------+------------------------------------------+
| ``` {.markdown .unnumbered} | ### A Third Level Header {.unnumbered}   |
| ### A Third Level Header    |                                          |
| ```                         |                                          |
+-----------------------------+------------------------------------------+
| ``` markdown                | This is a regular paragraph.             |
| This is a                   |                                          |
| regular paragraph.          |                                          |
| ```                         |                                          |
+-----------------------------+------------------------------------------+
| ``` markdown                | -   A bullet point                       |
| - A bullet point            |                                          |
| ```                         |                                          |
+-----------------------------+------------------------------------------+
| ``` markdown                | ![Caption](img/bib-box.jpg){width="217"} |
| ![Caption](bibi.jpg)        |                                          |
| ```                         |                                          |
+-----------------------------+------------------------------------------+

The heading to this chapter (@sec-markup-languages) is a first level heading and this section has a second level heading (@sec-what-is-markdown). The style e.g. font and colour and output (a html book) is controlled by another document, a configuration file.

## Literate programming {#sec-literate-prog}

[Literate programming](https://en.wikipedia.org/wiki/Literate_programming) is a concept created by Donald Knuth of mixing code and prose in the same document. The resulting document can be *tangled* to run the code and *weaved* to created a human readable document.

In practice this looks like chunks of prose such as the one you are reading, mixed with chunks of code such as the one below. The R code chunk calls the in-built R constant called `letters` that contains the 26 characters of the English alphabet. Code chunks can be set in different ways, to be visible or hidden, to evaluate the code or not, and so on. Here it is set to evaluate and print the output below.

```{r}
#| label: character-vector
letters
```

Try `LETTERS` to see the diffence between `letters` and `LETTERS`.

Literate programming is a trade-off: it's slow and verbose, but if written well, easier to understand and amend than traditional scripts. It suits certain tasks such as teaching and report writing. Another benefit is that it's often possible to use the same input document to create different types of output. For example, the same R Markdown document can be published as webpage, a Word document, a PDF or a PowerPoint presentation with relatively little effort.

Literate programming can be done with a variety of languages, not just R, Examples of literate programming tools are [Jupyter](https://jupyter.org/), [VS Code](https://code.visualstudio.com/), [R Markdown](https://rmarkdown.rstudio.com/) and [Quarto](https://quarto.org/).

## Different flavours of markdown {#sec-markdown-flavours}

There are a number of different flavours of markdown. By flavour I mean they all have common aspects, but differences in functionality that have been added to each version. Here are some of the common flavours.

### Markdown {#sec-original-markdown}

The original markdown was created by John Gruber in 2004. It contained the syntax for text, images, tables etc. that we saw in @sec-what-is-markdown. Details on the [Markdown project page](https://daringfireball.net/projects/markdown/) and in the [markdown guide](https://www.markdownguide.org/).

### Github flavoured markdown {#sec-github-markdown}

[Github flavoured markdown](https://github.github.com/gfm/) is the variant used by the software development platform [Github](www.github.com). Amongst other things, it added code block functionality such as the `letters` code block in @sec-literate-prog and strikethrough text.

### R Markdown {#sec-r-markdown}

Unsurpisingly, R Markdown is the version of markdown developed by the creators of RStudio and incorporates lots of functionality for combining markdown and R in the literate programming paradigm (@sec-literate-prog).

You can find full details in the [RStudio R Markdown documentation](https://rmarkdown.rstudio.com/index.html), the [R Markdown book](https://bookdown.org/yihui/rmarkdown/) and the [R Markdown cookbook](https://bookdown.org/yihui/rmarkdown-cookbook/).

If you're interested in more technical detail of how document creation works in R Markdown here's a [Stack overflow post explaining the relationship between R markdown knitr and pandoc](https://stackoverflow.com/questions/40563479/relationship-between-r-markdown-knitr-pandoc-and-bookdown)

### Quarto markdown {#sec-quarto-markdown}

[Quarto](https://quarto.org/) is created by Posit, the same company that created RStudio. It builds upon R Markdown (@sec-r-markdown), but is designed to be used with a variety of languages and tools for creating technical documents and reports. It simplifies some of the quirks of R Markdown and is supposedly easier for creating dynamic content such as dashboards.

As someone who started with LaTeX and then moved to R Markdown I've found it fairly straightfoward to change to Quarto and prefer it. Quarto comes bundled with RStudio from v2022.07.1, so we'll use Quarto for our exercises.

There's nothing wrong with sticking with R Markdown if you prefer it or feel it's too much effort to change. But if you have exisiting R Markdown files and want to switch, you'll find it's fairly easy to convert them into Quarto markdown and may find long term benefits.

We can create a new document in R Studio from the `File` menu and then `New File` displays all the default file types available as shown in @fig-new-doc. Here I highlighted a new `Quarto Document`.

```{r}
#| label: fig-new-doc 
#| echo: false
#| out-width: 80%
#| fig-cap: |
#|   Creating a new document in R Studio from the File menu
#| fig-alt: |
#|  A screenshot of the new document menu opened from the file menu in R Studio

knitr::include_graphics("img/new-document-rstudio.png", dpi = 270)
```

Selecting `Quarto Document` opens a dialogue box as shown in @fig-new-quarto-doc, giving us the opportunity to set various features such as the default output document format or whether we want to create a document or presentation. This can all be changed later, so don't worry if you change your mind.

```{r}
#| label: fig-new-quarto-doc 
#| echo: false
#| out-width: 80%
#| fig-cap: |
#|   Quarto Document dialogue box
#| fig-alt: |
#|  A screenshot of the new Quarto Document dialogue box in R Studio

knitr::include_graphics("img/new-quarto-document-rstudio.png", dpi = 270)
```

## Publishing outputs with Pandoc {#sec-pandoc}

[Pandoc](https://pandoc.org/) created in 2006 by John MacFarlane to convert one markup format to another, including HTML, XML, MS Word, PDF and all the various flavours of markdown.

As mentioned in @sec-literate-prog, it can be quite time saving to write in a single markdown language and then create the various output documents as required for yourself or your collaborators.

RStudio comes bundled with pandoc so there's no need to install it separately (unlesss you want to). Pandoc can be used independently of RStudio if you are willing to learn how to do [data science at the command line](https://jeroenjanssens.com/dsatcl/). Perhaps a problem for another day?!
